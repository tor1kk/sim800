
example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000064  08004590  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  08004590  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000094eb  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a61  00000000  00000000  000295c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cd  00000000  00000000  0002b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b00  00000000  00000000  0002bd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ee5  00000000  00000000  0004188d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000851c6  00000000  00000000  0004b772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024fc  00000000  00000000  000d0938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d2e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004288 	.word	0x08004288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004288 	.word	0x08004288

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09a      	sub	sp, #104	; 0x68
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f001 f8ab 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f87d 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f905 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f8d9 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    SIM800_Battery_t battery = {0};
 80005c2:	2300      	movs	r3, #0
 80005c4:	667b      	str	r3, [r7, #100]	; 0x64
    char tx_buff[100];

    //Start receiving data from module
	if( SIM800_ManageReceiving(&sim800h, ENABLE) != SIM800_OK )
 80005c6:	2101      	movs	r1, #1
 80005c8:	4832      	ldr	r0, [pc, #200]	; (8000694 <main+0xe8>)
 80005ca:	f000 f955 	bl	8000878 <SIM800_ManageReceiving>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <main+0x36>
	{
		Error_Handler();
 80005d4:	f000 f94a 	bl	800086c <Error_Handler>
	}

	//Wait for sim800 registration in network. Do a little break while iterating.
  	while( SIM800_GetNetworkRegStatus(&sim800h) != SIM800_Registered_HomeNetwork &&
 80005d8:	e003      	b.n	80005e2 <main+0x36>
  		   SIM800_GetNetworkRegStatus(&sim800h) != SIM800_Registered_Roaming)
	{
  		HAL_Delay(500);
 80005da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005de:	f001 f907 	bl	80017f0 <HAL_Delay>
  	while( SIM800_GetNetworkRegStatus(&sim800h) != SIM800_Registered_HomeNetwork &&
 80005e2:	482c      	ldr	r0, [pc, #176]	; (8000694 <main+0xe8>)
 80005e4:	f000 f9de 	bl	80009a4 <SIM800_GetNetworkRegStatus>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d005      	beq.n	80005fa <main+0x4e>
  		   SIM800_GetNetworkRegStatus(&sim800h) != SIM800_Registered_Roaming)
 80005ee:	4829      	ldr	r0, [pc, #164]	; (8000694 <main+0xe8>)
 80005f0:	f000 f9d8 	bl	80009a4 <SIM800_GetNetworkRegStatus>
 80005f4:	4603      	mov	r3, r0
  	while( SIM800_GetNetworkRegStatus(&sim800h) != SIM800_Registered_HomeNetwork &&
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d1ef      	bne.n	80005da <main+0x2e>
	}

	//Delete all exists SMS messages to free memory
	if( SIM800_DeleteAllSMSMessages(&sim800h) != SIM800_OK )
 80005fa:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0xe8>)
 80005fc:	f000 fa96 	bl	8000b2c <SIM800_DeleteAllSMSMessages>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <main+0x5e>
	{
		Error_Handler();
 8000606:	f000 f931 	bl	800086c <Error_Handler>
	}

	//Set SMS text mode
	if( SIM800_SetSMSTextMode(&sim800h) != SIM800_OK )
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <main+0xe8>)
 800060c:	f000 fa3a 	bl	8000a84 <SIM800_SetSMSTextMode>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0x6e>
	{
		Error_Handler();
 8000616:	f000 f929 	bl	800086c <Error_Handler>
	}

	//Enable SMS notifications callback
	if( SIM800_ManageSMSNotifications(&sim800h, ENABLE) != SIM800_OK )
 800061a:	2101      	movs	r1, #1
 800061c:	481d      	ldr	r0, [pc, #116]	; (8000694 <main+0xe8>)
 800061e:	f000 fb93 	bl	8000d48 <SIM800_ManageSMSNotifications>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <main+0x80>
	{
		Error_Handler();
 8000628:	f000 f920 	bl	800086c <Error_Handler>
	}

	//Send initial SMS message
	if( SIM800_SendSMSMessage(&sim800h, PHONE_NUMBER, "Ready!") != SIM800_OK )
 800062c:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <main+0xec>)
 800062e:	491b      	ldr	r1, [pc, #108]	; (800069c <main+0xf0>)
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <main+0xe8>)
 8000632:	f000 facf 	bl	8000bd4 <SIM800_SendSMSMessage>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <main+0x94>
	{
		Error_Handler();
 800063c:	f000 f916 	bl	800086c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

	  //Check if MCU received new message
	  if(flag)
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <main+0xf4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0fb      	beq.n	8000640 <main+0x94>
	  {
		  //If received message text is "Batt" receive information about battery and send it.
		  if( !strcmp(sms_buff, "Batt") )
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <main+0xf8>)
 800064a:	4817      	ldr	r0, [pc, #92]	; (80006a8 <main+0xfc>)
 800064c:	f7ff fdc8 	bl	80001e0 <strcmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d115      	bne.n	8000682 <main+0xd6>
		  {
			  SIM800_GetBatteryInfo(&sim800h, &battery);
 8000656:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800065a:	4619      	mov	r1, r3
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <main+0xe8>)
 800065e:	f000 f93f 	bl	80008e0 <SIM800_GetBatteryInfo>

			  sprintf(tx_buff, "Battery level: %d\r\nConnection level: %d", battery.battery_level, battery.conection_level);
 8000662:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000666:	461a      	mov	r2, r3
 8000668:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800066c:	4638      	mov	r0, r7
 800066e:	490f      	ldr	r1, [pc, #60]	; (80006ac <main+0x100>)
 8000670:	f003 f906 	bl	8003880 <siprintf>

			  SIM800_SendSMSMessage(&sim800h, PHONE_NUMBER, tx_buff);
 8000674:	463b      	mov	r3, r7
 8000676:	461a      	mov	r2, r3
 8000678:	4908      	ldr	r1, [pc, #32]	; (800069c <main+0xf0>)
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <main+0xe8>)
 800067c:	f000 faaa 	bl	8000bd4 <SIM800_SendSMSMessage>
 8000680:	e004      	b.n	800068c <main+0xe0>
		  } else
		  {
			  SIM800_SendSMSMessage(&sim800h, PHONE_NUMBER, "Unknown command!!!");
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <main+0x104>)
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <main+0xf0>)
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0xe8>)
 8000688:	f000 faa4 	bl	8000bd4 <SIM800_SendSMSMessage>
		  }
		  flag = 0;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <main+0xf4>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	  if(flag)
 8000692:	e7d5      	b.n	8000640 <main+0x94>
 8000694:	200000c4 	.word	0x200000c4
 8000698:	080042a0 	.word	0x080042a0
 800069c:	080042a8 	.word	0x080042a8
 80006a0:	20000614 	.word	0x20000614
 80006a4:	080042b8 	.word	0x080042b8
 80006a8:	20000618 	.word	0x20000618
 80006ac:	080042c0 	.word	0x080042c0
 80006b0:	080042e8 	.word	0x080042e8

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f8fc 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <SystemClock_Config+0xb8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <SystemClock_Config+0xb8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <SystemClock_Config+0xb8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <SystemClock_Config+0xbc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <SystemClock_Config+0xbc>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <SystemClock_Config+0xbc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fbad 	bl	8001e88 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000734:	f000 f89a 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fe10 	bl	8002378 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075e:	f000 f885 	bl	800086c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 ffc4 	bl	8002738 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f859 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000080 	.word	0x20000080
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x30>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(huart == sim800_uart)
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_UART_RxCpltCallback+0x20>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d102      	bne.n	8000814 <HAL_UART_RxCpltCallback+0x18>
	{
		SIM800_MessageHandler(&sim800h);
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <HAL_UART_RxCpltCallback+0x24>)
 8000810:	f000 fb28 	bl	8000e64 <SIM800_MessageHandler>
	}
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	200000c4 	.word	0x200000c4

08000824 <SIM800_NewSMSNotificationCallBack>:


void SIM800_NewSMSNotificationCallBack(SIM800_Handle_t *handle, uint32_t sms_index)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	SIM800_RequestSMSMessage(handle, sms_index);
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 fac1 	bl	8000db8 <SIM800_RequestSMSMessage>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <SIM800_RcvdSMSCallBack>:


void SIM800_RcvdSMSCallBack(SIM800_Handle_t *handle, SIM800_SMSMessage_t *message)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	strcpy(sms_buff, message->text);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3314      	adds	r3, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <SIM800_RcvdSMSCallBack+0x24>)
 8000852:	f003 f8c1 	bl	80039d8 <strcpy>

	flag = 1;
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SIM800_RcvdSMSCallBack+0x28>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000618 	.word	0x20000618
 8000868:	20000614 	.word	0x20000614

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <SIM800_ManageReceiving>:
 * @param   enordi: ENABLE(1) to start receiving, DISABLE(0) to stop receiving.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t in the corresponding .h file.
 */
SIM800_Status_t SIM800_ManageReceiving(SIM800_Handle_t *handle, uint8_t enordi)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	if( enordi )
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d017      	beq.n	80008ba <SIM800_ManageReceiving+0x42>
	{
		if( handle->recStatus == SIM800_DoesntReceive )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 354c 	ldrb.w	r3, [r3, #1356]	; 0x54c
 8000890:	2b00      	cmp	r3, #0
 8000892:	d112      	bne.n	80008ba <SIM800_ManageReceiving+0x42>
		{
			if( HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1) != HAL_OK )
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <SIM800_ManageReceiving+0x64>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3368      	adds	r3, #104	; 0x68
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	f001 ffdc 	bl	800285c <HAL_UART_Receive_IT>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SIM800_ManageReceiving+0x36>
			{
				return SIM800_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e011      	b.n	80008d2 <SIM800_ManageReceiving+0x5a>
			}

			handle->recStatus = SIM800_Receives;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
			return SIM800_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e00b      	b.n	80008d2 <SIM800_ManageReceiving+0x5a>
		}
	}

	if( handle->recStatus == SIM800_Receives )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 354c 	ldrb.w	r3, [r3, #1356]	; 0x54c
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d105      	bne.n	80008d0 <SIM800_ManageReceiving+0x58>
	{
		handle->recStatus = SIM800_DoesntReceive;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
		return SIM800_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	e000      	b.n	80008d2 <SIM800_ManageReceiving+0x5a>
	}

	return SIM800_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000

080008e0 <SIM800_GetBatteryInfo>:
 * @param   *battery: Pointer to the SIM800_Battery_t structure to store battery information.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t in the corresponding .h file.
 */
SIM800_Status_t SIM800_GetBatteryInfo(SIM800_Handle_t *handle, SIM800_Battery_t *battery)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	char cmd[] = "AT+CBC\r\n";
 80008ea:	4a2c      	ldr	r2, [pc, #176]	; (800099c <SIM800_GetBatteryInfo+0xbc>)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f2:	c303      	stmia	r3!, {r0, r1}
 80008f4:	701a      	strb	r2, [r3, #0]
	uint8_t index = add_pending_message(handle, "+CBC", NULL);
 80008f6:	2200      	movs	r2, #0
 80008f8:	4929      	ldr	r1, [pc, #164]	; (80009a0 <SIM800_GetBatteryInfo+0xc0>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 fc1a 	bl	8001134 <add_pending_message>
 8000900:	4603      	mov	r3, r0
 8000902:	75fb      	strb	r3, [r7, #23]

	if( send_command(cmd) == SIM800_ERROR )
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fc93 	bl	8001234 <send_command>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <SIM800_GetBatteryInfo+0x42>
	{
		remove_expected_code(handle, index);
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fc6c 	bl	80011f6 <remove_expected_code>
		return SIM800_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e038      	b.n	8000994 <SIM800_GetBatteryInfo+0xb4>
	}

	if( wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT )
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	461a      	mov	r2, r3
 8000926:	2104      	movs	r1, #4
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 fcb3 	bl	8001294 <wait_for_state>
 800092e:	4603      	mov	r3, r0
 8000930:	2b02      	cmp	r3, #2
 8000932:	d106      	bne.n	8000942 <SIM800_GetBatteryInfo+0x62>
	{
		remove_expected_code(handle, index);
 8000934:	7dfb      	ldrb	r3, [r7, #23]
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fc5c 	bl	80011f6 <remove_expected_code>
		return SIM800_TIMEOUT;
 800093e:	2302      	movs	r3, #2
 8000940:	e028      	b.n	8000994 <SIM800_GetBatteryInfo+0xb4>
	}

	if( validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8000942:	7dfa      	ldrb	r2, [r7, #23]
 8000944:	4613      	mov	r3, r2
 8000946:	015b      	lsls	r3, r3, #5
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	3378      	adds	r3, #120	; 0x78
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	3304      	adds	r3, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f000 fc89 	bl	800126c <validate_message>
 800095a:	4603      	mov	r3, r0
 800095c:	2b01      	cmp	r3, #1
 800095e:	d106      	bne.n	800096e <SIM800_GetBatteryInfo+0x8e>
	{
		remove_expected_code(handle, index);
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	4619      	mov	r1, r3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 fc46 	bl	80011f6 <remove_expected_code>
		return SIM800_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e012      	b.n	8000994 <SIM800_GetBatteryInfo+0xb4>
	}

	cbc_parser(battery, handle->expected_codes[index].data);
 800096e:	7dfa      	ldrb	r2, [r7, #23]
 8000970:	4613      	mov	r3, r2
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	3378      	adds	r3, #120	; 0x78
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	3304      	adds	r3, #4
 8000980:	4619      	mov	r1, r3
 8000982:	6838      	ldr	r0, [r7, #0]
 8000984:	f000 fd17 	bl	80013b6 <cbc_parser>

	remove_expected_code(handle, index);
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	4619      	mov	r1, r3
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 fc32 	bl	80011f6 <remove_expected_code>

	return  SIM800_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08004304 	.word	0x08004304
 80009a0:	080042fc 	.word	0x080042fc

080009a4 <SIM800_GetNetworkRegStatus>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_NetworkRegStatus_t enumeration value representing the network registration status.
 * @return  Network registration status. For possible values, refer to the SIM800_NetworkRegStatus_t enumeration.
 */
SIM800_NetworkRegStatus_t SIM800_GetNetworkRegStatus(SIM800_Handle_t *handle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	char cmd[] = "AT+CREG?\r\n", *ptr;
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <SIM800_GetNetworkRegStatus+0xd8>)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b4:	c303      	stmia	r3!, {r0, r1}
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	3302      	adds	r3, #2
 80009ba:	0c12      	lsrs	r2, r2, #16
 80009bc:	701a      	strb	r2, [r3, #0]
	uint8_t index = add_pending_message(handle, "+CREG", NULL);
 80009be:	2200      	movs	r2, #0
 80009c0:	492f      	ldr	r1, [pc, #188]	; (8000a80 <SIM800_GetNetworkRegStatus+0xdc>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 fbb6 	bl	8001134 <add_pending_message>
 80009c8:	4603      	mov	r3, r0
 80009ca:	77fb      	strb	r3, [r7, #31]
	SIM800_NetworkRegStatus_t status;

	if( send_command(cmd) == SIM800_ERROR )
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fc2f 	bl	8001234 <send_command>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d106      	bne.n	80009ea <SIM800_GetNetworkRegStatus+0x46>
	{
		remove_expected_code(handle, index);
 80009dc:	7ffb      	ldrb	r3, [r7, #31]
 80009de:	4619      	mov	r1, r3
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fc08 	bl	80011f6 <remove_expected_code>
		return SIM800_FAIL;
 80009e6:	2306      	movs	r3, #6
 80009e8:	e043      	b.n	8000a72 <SIM800_GetNetworkRegStatus+0xce>
	}

	if( wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT )
 80009ea:	7ffb      	ldrb	r3, [r7, #31]
 80009ec:	461a      	mov	r2, r3
 80009ee:	2104      	movs	r1, #4
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 fc4f 	bl	8001294 <wait_for_state>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d106      	bne.n	8000a0a <SIM800_GetNetworkRegStatus+0x66>
	{
		remove_expected_code(handle, index);
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
 80009fe:	4619      	mov	r1, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 fbf8 	bl	80011f6 <remove_expected_code>
		return SIM800_FAIL;
 8000a06:	2306      	movs	r3, #6
 8000a08:	e033      	b.n	8000a72 <SIM800_GetNetworkRegStatus+0xce>
	}

	if( validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8000a0a:	7ffa      	ldrb	r2, [r7, #31]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	015b      	lsls	r3, r3, #5
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	3378      	adds	r3, #120	; 0x78
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fc25 	bl	800126c <validate_message>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d106      	bne.n	8000a36 <SIM800_GetNetworkRegStatus+0x92>
	{
		remove_expected_code(handle, index);
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 fbe2 	bl	80011f6 <remove_expected_code>
		return SIM800_FAIL;
 8000a32:	2306      	movs	r3, #6
 8000a34:	e01d      	b.n	8000a72 <SIM800_GetNetworkRegStatus+0xce>
	}

	ptr = strchr(handle->expected_codes[index].data, ',');
 8000a36:	7ffa      	ldrb	r2, [r7, #31]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	015b      	lsls	r3, r3, #5
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	3378      	adds	r3, #120	; 0x78
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	3304      	adds	r3, #4
 8000a48:	212c      	movs	r1, #44	; 0x2c
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 ff4f 	bl	80038ee <strchr>
 8000a50:	61b8      	str	r0, [r7, #24]
	status = strtol(++ptr, NULL, 10);
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	220a      	movs	r2, #10
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	69b8      	ldr	r0, [r7, #24]
 8000a5e:	f002 fec3 	bl	80037e8 <strtol>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]

	remove_expected_code(handle, index);
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 fbc3 	bl	80011f6 <remove_expected_code>

	return status;
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	08004328 	.word	0x08004328
 8000a80:	08004320 	.word	0x08004320

08000a84 <SIM800_SetSMSTextMode>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t in the corresponding .h file.
 */
SIM800_Status_t SIM800_SetSMSTextMode(SIM800_Handle_t *handle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    char cmd[] = "AT+CMGF=1\r\n";
 8000a8c:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <SIM800_SetSMSTextMode+0xa0>)
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint8_t index = add_pending_message(handle, "+CMGF", NULL);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4923      	ldr	r1, [pc, #140]	; (8000b28 <SIM800_SetSMSTextMode+0xa4>)
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 fb49 	bl	8001134 <add_pending_message>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	75fb      	strb	r3, [r7, #23]

    if (send_command(cmd) == SIM800_ERROR)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fbc2 	bl	8001234 <send_command>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d106      	bne.n	8000ac4 <SIM800_SetSMSTextMode+0x40>
    {
        remove_expected_code(handle, index);
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fb9b 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e02b      	b.n	8000b1c <SIM800_SetSMSTextMode+0x98>
    }

    if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2104      	movs	r1, #4
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 fbe2 	bl	8001294 <wait_for_state>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d106      	bne.n	8000ae4 <SIM800_SetSMSTextMode+0x60>
    {
        remove_expected_code(handle, index);
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fb8b 	bl	80011f6 <remove_expected_code>
        return SIM800_TIMEOUT;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e01b      	b.n	8000b1c <SIM800_SetSMSTextMode+0x98>
    }

    if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8000ae4:	7dfa      	ldrb	r2, [r7, #23]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	015b      	lsls	r3, r3, #5
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	3378      	adds	r3, #120	; 0x78
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	3304      	adds	r3, #4
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fbb8 	bl	800126c <validate_message>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d106      	bne.n	8000b10 <SIM800_SetSMSTextMode+0x8c>
    {
        remove_expected_code(handle, index);
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	4619      	mov	r1, r3
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 fb75 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e005      	b.n	8000b1c <SIM800_SetSMSTextMode+0x98>
    }

    remove_expected_code(handle, index);
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 fb6e 	bl	80011f6 <remove_expected_code>

    return SIM800_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	0800433c 	.word	0x0800433c
 8000b28:	08004334 	.word	0x08004334

08000b2c <SIM800_DeleteAllSMSMessages>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_DeleteAllSMSMessages(SIM800_Handle_t *handle)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	char cmd[] = "AT+CMGD=1,4\r\n";
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <SIM800_DeleteAllSMSMessages+0xa0>)
 8000b36:	f107 0408 	add.w	r4, r7, #8
 8000b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b3e:	8023      	strh	r3, [r4, #0]
	uint8_t index = add_pending_message(handle, "+CMGD", NULL);
 8000b40:	2200      	movs	r2, #0
 8000b42:	4923      	ldr	r1, [pc, #140]	; (8000bd0 <SIM800_DeleteAllSMSMessages+0xa4>)
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 faf5 	bl	8001134 <add_pending_message>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	75fb      	strb	r3, [r7, #23]

	if (send_command(cmd) == SIM800_ERROR)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fb6e 	bl	8001234 <send_command>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d106      	bne.n	8000b6c <SIM800_DeleteAllSMSMessages+0x40>
	{
		remove_expected_code(handle, index);
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb47 	bl	80011f6 <remove_expected_code>
		return SIM800_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e02b      	b.n	8000bc4 <SIM800_DeleteAllSMSMessages+0x98>
	}

	if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2104      	movs	r1, #4
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fb8e 	bl	8001294 <wait_for_state>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d106      	bne.n	8000b8c <SIM800_DeleteAllSMSMessages+0x60>
	{
		remove_expected_code(handle, index);
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	4619      	mov	r1, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fb37 	bl	80011f6 <remove_expected_code>
		return SIM800_TIMEOUT;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	e01b      	b.n	8000bc4 <SIM800_DeleteAllSMSMessages+0x98>
	}

	if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8000b8c:	7dfa      	ldrb	r2, [r7, #23]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	015b      	lsls	r3, r3, #5
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	3378      	adds	r3, #120	; 0x78
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fb64 	bl	800126c <validate_message>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d106      	bne.n	8000bb8 <SIM800_DeleteAllSMSMessages+0x8c>
	{
		remove_expected_code(handle, index);
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 fb21 	bl	80011f6 <remove_expected_code>
		return SIM800_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e005      	b.n	8000bc4 <SIM800_DeleteAllSMSMessages+0x98>
	}

	remove_expected_code(handle, index);
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 fb1a 	bl	80011f6 <remove_expected_code>

	return SIM800_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	371c      	adds	r7, #28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	08004350 	.word	0x08004350
 8000bd0:	08004348 	.word	0x08004348

08000bd4 <SIM800_SendSMSMessage>:
 * @param   *message: SMS message to be sent.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure, SIM800_TIMEOUT on timeout.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_SendSMSMessage(SIM800_Handle_t *handle, char *destination, char *message)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09e      	sub	sp, #120	; 0x78
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
    char buff[SMS_TX_MAX_LEN];
    // Add an expected code for the +CMGS code
    uint8_t index = add_pending_message(handle, "+CMGS", NULL);
 8000be0:	2200      	movs	r2, #0
 8000be2:	4955      	ldr	r1, [pc, #340]	; (8000d38 <SIM800_SendSMSMessage+0x164>)
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f000 faa5 	bl	8001134 <add_pending_message>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    if (strlen(destination) > (SMS_TX_MAX_LEN - 3) || strlen(message) > (SMS_TX_MAX_LEN - 3))
 8000bf0:	68b8      	ldr	r0, [r7, #8]
 8000bf2:	f7ff faff 	bl	80001f4 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b61      	cmp	r3, #97	; 0x61
 8000bfa:	d805      	bhi.n	8000c08 <SIM800_SendSMSMessage+0x34>
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff faf9 	bl	80001f4 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b61      	cmp	r3, #97	; 0x61
 8000c06:	d907      	bls.n	8000c18 <SIM800_SendSMSMessage+0x44>
    {
        // Remove the expected code if the data is too large
        remove_expected_code(handle, index);
 8000c08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 faf1 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e08b      	b.n	8000d30 <SIM800_SendSMSMessage+0x15c>
    }

    // Prepare the AT command for sending an SMS
    strcpy(buff, "AT+CMGS=\"");
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4a47      	ldr	r2, [pc, #284]	; (8000d3c <SIM800_SendSMSMessage+0x168>)
 8000c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c20:	c303      	stmia	r3!, {r0, r1}
 8000c22:	801a      	strh	r2, [r3, #0]
    strcat(buff, destination);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fe50 	bl	80038d0 <strcat>
    strcat(buff, "\"\r\n");
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fadd 	bl	80001f4 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4413      	add	r3, r2
 8000c44:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <SIM800_SendSMSMessage+0x16c>)
 8000c46:	6810      	ldr	r0, [r2, #0]
 8000c48:	6018      	str	r0, [r3, #0]

    // Send the command
    if (send_command(buff) == SIM800_ERROR)
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 faf0 	bl	8001234 <send_command>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d107      	bne.n	8000c6a <SIM800_SendSMSMessage+0x96>
    {
        // Remove the expected code in case of failure
        remove_expected_code(handle, index);
 8000c5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c5e:	4619      	mov	r1, r3
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f000 fac8 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e062      	b.n	8000d30 <SIM800_SendSMSMessage+0x15c>
    }

    // Wait after sending the first command
    HAL_Delay(500);
 8000c6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6e:	f000 fdbf 	bl	80017f0 <HAL_Delay>

    // Prepare the message for sending and add an end character
    strcpy(buff, message);
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fead 	bl	80039d8 <strcpy>
    strcat(buff, "\032");
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fab6 	bl	80001f4 <strlen>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4413      	add	r3, r2
 8000c92:	492c      	ldr	r1, [pc, #176]	; (8000d44 <SIM800_SendSMSMessage+0x170>)
 8000c94:	461a      	mov	r2, r3
 8000c96:	460b      	mov	r3, r1
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	8013      	strh	r3, [r2, #0]

    // Send the SMS message
    if (send_command(buff) == SIM800_ERROR)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fac7 	bl	8001234 <send_command>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10a      	bne.n	8000cc2 <SIM800_SendSMSMessage+0xee>
    {
        // Send the end character in case of failure
        send_command("\032");
 8000cac:	4825      	ldr	r0, [pc, #148]	; (8000d44 <SIM800_SendSMSMessage+0x170>)
 8000cae:	f000 fac1 	bl	8001234 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8000cb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f000 fa9c 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e036      	b.n	8000d30 <SIM800_SendSMSMessage+0x15c>
    }

    // Wait for a response to the sent SMS
    if (wait_for_state(handle, SIM800_ReceivedStatus, index) == SIM800_TIMEOUT)
 8000cc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2104      	movs	r1, #4
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f000 fae2 	bl	8001294 <wait_for_state>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d10a      	bne.n	8000cec <SIM800_SendSMSMessage+0x118>
    {
        // Send the end character in case of a timeout
        send_command("\032");
 8000cd6:	481b      	ldr	r0, [pc, #108]	; (8000d44 <SIM800_SendSMSMessage+0x170>)
 8000cd8:	f000 faac 	bl	8001234 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8000cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 fa87 	bl	80011f6 <remove_expected_code>
        return SIM800_TIMEOUT;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e021      	b.n	8000d30 <SIM800_SendSMSMessage+0x15c>
    }

    // Validate the response message
    if (validate_message(handle->expected_codes[index].data) == SIM800_ERROR)
 8000cec:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	3378      	adds	r3, #120	; 0x78
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3304      	adds	r3, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fab3 	bl	800126c <validate_message>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10a      	bne.n	8000d22 <SIM800_SendSMSMessage+0x14e>
    {
        // Send the end character in case of an error
        send_command("\032");
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <SIM800_SendSMSMessage+0x170>)
 8000d0e:	f000 fa91 	bl	8001234 <send_command>
        // Remove the expected code
        remove_expected_code(handle, index);
 8000d12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d16:	4619      	mov	r1, r3
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 fa6c 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e006      	b.n	8000d30 <SIM800_SendSMSMessage+0x15c>
    }

    // Remove the expected code since the SMS is sent
    remove_expected_code(handle, index);
 8000d22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d26:	4619      	mov	r1, r3
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 fa64 	bl	80011f6 <remove_expected_code>
    return SIM800_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3778      	adds	r7, #120	; 0x78
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	08004360 	.word	0x08004360
 8000d3c:	08004368 	.word	0x08004368
 8000d40:	08004374 	.word	0x08004374
 8000d44:	08004378 	.word	0x08004378

08000d48 <SIM800_ManageSMSNotifications>:
 * @param   enordi: ENABLE to enable SMS notifications, DISABLE to disable SMS notifications.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 * @return  Execution status. For details, refer to the SIM800_Status_t enumeration.
 */
SIM800_Status_t SIM800_ManageSMSNotifications(SIM800_Handle_t *handle, uint8_t enordi)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
    static uint32_t index = 0xFFFF;

    if (enordi == ENABLE)
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d112      	bne.n	8000d80 <SIM800_ManageSMSNotifications+0x38>
    {
        if (index == 0xFFFF)
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <SIM800_ManageSMSNotifications+0x64>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10a      	bne.n	8000d7c <SIM800_ManageSMSNotifications+0x34>
        {
            // Add an expected code for incoming SMS notifications
            index = add_pending_message(handle, "+CMTI", &cmti_handler);
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <SIM800_ManageSMSNotifications+0x68>)
 8000d68:	4912      	ldr	r1, [pc, #72]	; (8000db4 <SIM800_ManageSMSNotifications+0x6c>)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f9e2 	bl	8001134 <add_pending_message>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <SIM800_ManageSMSNotifications+0x64>)
 8000d76:	601a      	str	r2, [r3, #0]
            return SIM800_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e013      	b.n	8000da4 <SIM800_ManageSMSNotifications+0x5c>
        }
        return SIM800_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e011      	b.n	8000da4 <SIM800_ManageSMSNotifications+0x5c>
    }
    else
    {
        if (index != 0xFFFF)
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <SIM800_ManageSMSNotifications+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00a      	beq.n	8000da2 <SIM800_ManageSMSNotifications+0x5a>
        {
            // Remove the expected code for incoming SMS notifications
            remove_expected_code(handle, index);
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <SIM800_ManageSMSNotifications+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 fa2e 	bl	80011f6 <remove_expected_code>
            index = 0xFFFF;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SIM800_ManageSMSNotifications+0x64>)
 8000d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da0:	601a      	str	r2, [r3, #0]
        }
    }

    return SIM800_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000004 	.word	0x20000004
 8000db0:	080012e3 	.word	0x080012e3
 8000db4:	0800437c 	.word	0x0800437c

08000db8 <SIM800_RequestSMSMessage>:
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @param   sms_index: Index of the SMS message to request.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 */
SIM800_Status_t SIM800_RequestSMSMessage(SIM800_Handle_t *handle, uint32_t sms_index)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	466b      	mov	r3, sp
 8000dc4:	461c      	mov	r4, r3
    char cmd[strlen("AT+CMGR=") + 12];
 8000dc6:	2313      	movs	r3, #19
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	2314      	movs	r3, #20
 8000dcc:	3307      	adds	r3, #7
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000dd6:	466b      	mov	r3, sp
 8000dd8:	3300      	adds	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    char str_sms_index[10];

    // Add an expected +CMGR code and associate it with the cmgr_handler function
    uint8_t index = add_pending_message(handle, "+CMGR", &cmgr_handler);
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <SIM800_RequestSMSMessage+0x9c>)
 8000dde:	491e      	ldr	r1, [pc, #120]	; (8000e58 <SIM800_RequestSMSMessage+0xa0>)
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f9a7 	bl	8001134 <add_pending_message>
 8000de6:	4603      	mov	r3, r0
 8000de8:	75fb      	strb	r3, [r7, #23]

    // Prepare the AT command to request the SMS message
    strcpy(cmd, "AT+CMGR=");
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	491b      	ldr	r1, [pc, #108]	; (8000e5c <SIM800_RequestSMSMessage+0xa4>)
 8000dee:	461a      	mov	r2, r3
 8000df0:	460b      	mov	r3, r1
 8000df2:	cb03      	ldmia	r3!, {r0, r1}
 8000df4:	6010      	str	r0, [r2, #0]
 8000df6:	6051      	str	r1, [r2, #4]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	7213      	strb	r3, [r2, #8]
    itoa(sms_index, str_sms_index, 10);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f107 010c 	add.w	r1, r7, #12
 8000e02:	220a      	movs	r2, #10
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fc6b 	bl	80036e0 <itoa>
    strcat(cmd, str_sms_index);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	69b8      	ldr	r0, [r7, #24]
 8000e12:	f002 fd5d 	bl	80038d0 <strcat>
    strcat(cmd, "\r\n");
 8000e16:	69b8      	ldr	r0, [r7, #24]
 8000e18:	f7ff f9ec 	bl	80001f4 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <SIM800_RequestSMSMessage+0xa8>)
 8000e26:	8811      	ldrh	r1, [r2, #0]
 8000e28:	7892      	ldrb	r2, [r2, #2]
 8000e2a:	8019      	strh	r1, [r3, #0]
 8000e2c:	709a      	strb	r2, [r3, #2]

    // Send the command to request the SMS message
    if (send_command(cmd) == SIM800_ERROR)
 8000e2e:	69b8      	ldr	r0, [r7, #24]
 8000e30:	f000 fa00 	bl	8001234 <send_command>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d106      	bne.n	8000e48 <SIM800_RequestSMSMessage+0x90>
    {
        remove_expected_code(handle, index);
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 f9d9 	bl	80011f6 <remove_expected_code>
        return SIM800_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <SIM800_RequestSMSMessage+0x92>
    }

    return SIM800_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	46a5      	mov	sp, r4
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3724      	adds	r7, #36	; 0x24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	08001345 	.word	0x08001345
 8000e58:	08004384 	.word	0x08004384
 8000e5c:	0800438c 	.word	0x0800438c
 8000e60:	08004398 	.word	0x08004398

08000e64 <SIM800_MessageHandler>:
 * The function is designed to work with asynchronous UART communication.
 *
 * @param   *handle: Pointer to the SIM800 handle structure.
 */
void SIM800_MessageHandler(SIM800_Handle_t *handle)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uint32_t counter = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
    uint8_t flag = 1; // Flag to check if the first part of a response (e.g., +CODE) is received
 8000e70:	2301      	movs	r3, #1
 8000e72:	74fb      	strb	r3, [r7, #19]
    size_t data_str_len;

    if (handle->rcvdByte != '\n')
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	d018      	beq.n	8000eb0 <SIM800_MessageHandler+0x4c>
    {
        // Store the received character in the buffer(if buffer is not full)
        if (handle->rxCounter < RX_BUFFER_LENGTH)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e82:	2b63      	cmp	r3, #99	; 0x63
 8000e84:	d80b      	bhi.n	8000e9e <SIM800_MessageHandler+0x3a>
        {
            handle->rxBuffer[handle->rxCounter] = handle->rcvdByte;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	54d1      	strb	r1, [r2, r3]
            handle->rxCounter++;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        // Continue receiving characters
        HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1);
 8000e9e:	4ba1      	ldr	r3, [pc, #644]	; (8001124 <SIM800_MessageHandler+0x2c0>)
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3368      	adds	r3, #104	; 0x68
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f001 fcd7 	bl	800285c <HAL_UART_Receive_IT>
        return;
 8000eae:	e135      	b.n	800111c <SIM800_MessageHandler+0x2b8>
    }

    // Append the newline character and terminate the buffer
    handle->rxBuffer[handle->rxCounter] = handle->rcvdByte;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	f892 1068 	ldrb.w	r1, [r2, #104]	; 0x68
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	54d1      	strb	r1, [r2, r3]
    handle->rxCounter++;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	665a      	str	r2, [r3, #100]	; 0x64
    handle->rxBuffer[handle->rxCounter] = '\0';
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	2100      	movs	r1, #0
 8000ed0:	54d1      	strb	r1, [r2, r3]

    if (!strncmp(handle->rxBuffer, "OK", 2) || !strncmp(handle->rxBuffer, "ERROR", 2))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4994      	ldr	r1, [pc, #592]	; (8001128 <SIM800_MessageHandler+0x2c4>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fd15 	bl	8003908 <strncmp>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d008      	beq.n	8000ef6 <SIM800_MessageHandler+0x92>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4990      	ldr	r1, [pc, #576]	; (800112c <SIM800_MessageHandler+0x2c8>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fd0c 	bl	8003908 <strncmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d14e      	bne.n	8000f94 <SIM800_MessageHandler+0x130>
    {
        // Check if the received response is "OK" or "ERROR"
        data_str_len = strlen(handle->expected_codes[handle->curProccesPacket_index].data);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8000efc:	4613      	mov	r3, r2
 8000efe:	015b      	lsls	r3, r3, #5
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	3378      	adds	r3, #120	; 0x78
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f971 	bl	80001f4 <strlen>
 8000f12:	60b8      	str	r0, [r7, #8]

        // Append the data to the expected code buffer
        strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	015b      	lsls	r3, r3, #5
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	4413      	add	r3, r2
 8000f26:	3378      	adds	r3, #120	; 0x78
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	1d18      	adds	r0, r3, #4
                handle->rxBuffer,
 8000f2e:	6879      	ldr	r1, [r7, #4]
        strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000f36:	461a      	mov	r2, r3
 8000f38:	f002 fcf8 	bl	800392c <strncpy>
                RECEIVE_DATA_MAX_LENGTH - data_str_len);

        // Set the received status to SIM800_ReceivedStatus
        handle->expected_codes[handle->curProccesPacket_index].state = SIM800_ReceivedStatus;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	33e0      	adds	r3, #224	; 0xe0
 8000f50:	2204      	movs	r2, #4
 8000f52:	701a      	strb	r2, [r3, #0]

        // Invoke the associated handler if available
        if (handle->expected_codes[handle->curProccesPacket_index].handle != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	1a9b      	subs	r3, r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	33e4      	adds	r3, #228	; 0xe4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80c6 	beq.w	80010fc <SIM800_MessageHandler+0x298>
        {
            handle->expected_codes[handle->curProccesPacket_index].handle(handle, handle->curProccesPacket_index);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	33e4      	adds	r3, #228	; 0xe4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4798      	blx	r3
        if (handle->expected_codes[handle->curProccesPacket_index].handle != NULL)
 8000f92:	e0b3      	b.n	80010fc <SIM800_MessageHandler+0x298>
        }
    }
    else
    {
        for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e065      	b.n	8001066 <SIM800_MessageHandler+0x202>
        {
            if (handle->expected_codes[i].state == SIM800_WaitingFor)
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	015b      	lsls	r3, r3, #5
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	33e0      	adds	r3, #224	; 0xe0
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d157      	bne.n	8001060 <SIM800_MessageHandler+0x1fc>
            {
                if (!strncmp(handle->rxBuffer, handle->expected_codes[i].code, handle->expected_codes[i].code_length))
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	3368      	adds	r3, #104	; 0x68
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	1d1c      	adds	r4, r3, #4
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	1a9b      	subs	r3, r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3378      	adds	r3, #120	; 0x78
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f002 fc95 	bl	8003908 <strncmp>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d134      	bne.n	800104e <SIM800_MessageHandler+0x1ea>
                {
                    // Store the data in the corresponding buffer
                    strcpy(handle->expected_codes[i].data, handle->rxBuffer);
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	015b      	lsls	r3, r3, #5
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	3378      	adds	r3, #120	; 0x78
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fcec 	bl	80039d8 <strcpy>

                    // Update the current processed packet index
                    handle->curProccesPacket_index = i;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548

                    // Set the received status to SIM800_Received
                    handle->expected_codes[i].state = SIM800_Received;
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	4613      	mov	r3, r2
 800100e:	015b      	lsls	r3, r3, #5
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	33e0      	adds	r3, #224	; 0xe0
 8001018:	2202      	movs	r2, #2
 800101a:	701a      	strb	r2, [r3, #0]

                    flag = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	74fb      	strb	r3, [r7, #19]

                    // Invoke the associated handler if available
                    if (handle->expected_codes[i].handle != NULL)
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4613      	mov	r3, r2
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	33e4      	adds	r3, #228	; 0xe4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00b      	beq.n	800104e <SIM800_MessageHandler+0x1ea>
                    {
                        handle->expected_codes[i].handle(handle, i);
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4613      	mov	r3, r2
 800103c:	015b      	lsls	r3, r3, #5
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	33e4      	adds	r3, #228	; 0xe4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	4798      	blx	r3
                    }
                }

                counter++;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
                if (counter >= handle->expected_codes_count)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	d206      	bcs.n	800106e <SIM800_MessageHandler+0x20a>
        for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d996      	bls.n	8000f9a <SIM800_MessageHandler+0x136>
 800106c:	e000      	b.n	8001070 <SIM800_MessageHandler+0x20c>
                {
                    break; // Exit the loop when all expected codes have been processed
 800106e:	bf00      	nop
                }
            }
        }

        if (flag && handle->expected_codes[handle->curProccesPacket_index].state == SIM800_Received &&
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d042      	beq.n	80010fc <SIM800_MessageHandler+0x298>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	015b      	lsls	r3, r3, #5
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	33e0      	adds	r3, #224	; 0xe0
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d135      	bne.n	80010fc <SIM800_MessageHandler+0x298>
            strncmp(handle->expected_codes[handle->curProccesPacket_index].data, "\r\n", 2))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 8001096:	4613      	mov	r3, r2
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	3378      	adds	r3, #120	; 0x78
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	2202      	movs	r2, #2
 80010a8:	4921      	ldr	r1, [pc, #132]	; (8001130 <SIM800_MessageHandler+0x2cc>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fc2c 	bl	8003908 <strncmp>
 80010b0:	4603      	mov	r3, r0
        if (flag && handle->expected_codes[handle->curProccesPacket_index].state == SIM800_Received &&
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d022      	beq.n	80010fc <SIM800_MessageHandler+0x298>
        {
            data_str_len = strlen(handle->expected_codes[handle->curProccesPacket_index].data);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 80010bc:	4613      	mov	r3, r2
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	3378      	adds	r3, #120	; 0x78
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	3304      	adds	r3, #4
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f891 	bl	80001f4 <strlen>
 80010d2:	60b8      	str	r0, [r7, #8]

            // Append the received characters to the current expected code buffer
            strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
 80010da:	4613      	mov	r3, r2
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4413      	add	r3, r2
 80010e6:	3378      	adds	r3, #120	; 0x78
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	1d18      	adds	r0, r3, #4
                    handle->rxBuffer,
 80010ee:	6879      	ldr	r1, [r7, #4]
            strncpy(&handle->expected_codes[handle->curProccesPacket_index].data[data_str_len],
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80010f6:	461a      	mov	r2, r3
 80010f8:	f002 fc18 	bl	800392c <strncpy>
                    RECEIVE_DATA_MAX_LENGTH - data_str_len);
        }
    }

    // Reset the receive counter
    handle->rxCounter = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	665a      	str	r2, [r3, #100]	; 0x64

    // If still in receive status, continue to receive characters
    if (handle->recStatus == SIM800_Receives)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 354c 	ldrb.w	r3, [r3, #1356]	; 0x54c
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <SIM800_MessageHandler+0x2b8>
    {
        HAL_UART_Receive_IT(SIM800_UART, (uint8_t *)&handle->rcvdByte, 1);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SIM800_MessageHandler+0x2c0>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3368      	adds	r3, #104	; 0x68
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f001 fba0 	bl	800285c <HAL_UART_Receive_IT>
    }
}
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000
 8001128:	0800439c 	.word	0x0800439c
 800112c:	080043a0 	.word	0x080043a0
 8001130:	08004398 	.word	0x08004398

08001134 <add_pending_message>:
 * @param   *code: Expected message code to watch for (e.g., "+CMGS").
 * @param   messageHandler: Custom message handler function to call upon receiving the expected code.
 * @retval  The index under which the code is added or 0xFF on error.
 */
static uint8_t add_pending_message(SIM800_Handle_t *handle, char *code, void (*messageHandler)(void*, uint32_t))
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
    size_t code_len = strlen(code);
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f7ff f857 	bl	80001f4 <strlen>
 8001146:	6138      	str	r0, [r7, #16]

    if (code_len > CODE_MAX_LENGTH)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d901      	bls.n	8001152 <add_pending_message+0x1e>
    {
        return 0xFF; // Error: Code is too long
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	e04d      	b.n	80011ee <add_pending_message+0xba>
    }

    for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e046      	b.n	80011e6 <add_pending_message+0xb2>
    {
        if (handle->expected_codes[i].state == SIM800_DoesntExpects)
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4613      	mov	r3, r2
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	33e0      	adds	r3, #224	; 0xe0
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d138      	bne.n	80011e0 <add_pending_message+0xac>
        {
            // Store the code, its length, and the associated message handler (if any)
            strcpy(handle->expected_codes[i].code, code);
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4613      	mov	r3, r2
 8001172:	015b      	lsls	r3, r3, #5
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3368      	adds	r3, #104	; 0x68
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	3304      	adds	r3, #4
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fc28 	bl	80039d8 <strcpy>
            handle->expected_codes[i].code_length = code_len;
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4613      	mov	r3, r2
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3378      	adds	r3, #120	; 0x78
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	601a      	str	r2, [r3, #0]
            handle->expected_codes[i].handle = messageHandler;
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4613      	mov	r3, r2
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	33e4      	adds	r3, #228	; 0xe4
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
            handle->expected_codes[i].state = SIM800_WaitingFor;
 80011b0:	68f9      	ldr	r1, [r7, #12]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4613      	mov	r3, r2
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	33e0      	adds	r3, #224	; 0xe0
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]

            // Increase the count of expected codes
            handle->expected_codes_count++;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544

            // Set the current processed packet index
            handle->curProccesPacket_index = i;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548

            return i; // Return the index under which the code is added
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	e006      	b.n	80011ee <add_pending_message+0xba>
    for (uint32_t i = 0; i < EXPECTED_CODES_MAX_COUNT; i++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d9b5      	bls.n	8001158 <add_pending_message+0x24>
        }
    }

    return 0xFF; // Error: Maximum expected codes count reached
 80011ec:	23ff      	movs	r3, #255	; 0xff
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <remove_expected_code>:
 *
 * @param   *handle: Pointer to the SIM800 handle structure.
 * @param   index: The index of the expected code to remove.
 */
static void remove_expected_code(SIM800_Handle_t *handle, uint8_t index)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
    memset(&handle->expected_codes[index], 0, sizeof(handle->expected_codes[index]));
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	4613      	mov	r3, r2
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	3368      	adds	r3, #104	; 0x68
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	3304      	adds	r3, #4
 8001214:	227c      	movs	r2, #124	; 0x7c
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fb51 	bl	80038c0 <memset>
    handle->expected_codes_count--;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <send_command>:
 *
 * @param   *cmd: Pointer to the AT command string to be sent.
 * @retval  SIM800_OK on success, SIM800_ERROR on failure.
 */
static SIM800_Status_t send_command(char *cmd)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    if (HAL_UART_Transmit_IT(SIM800_UART, (uint8_t *)cmd, strlen(cmd)) != HAL_OK)
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <send_command+0x34>)
 800123e:	681c      	ldr	r4, [r3, #0]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7fe ffd7 	bl	80001f4 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29b      	uxth	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4620      	mov	r0, r4
 8001250:	f001 fabf 	bl	80027d2 <HAL_UART_Transmit_IT>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <send_command+0x2a>
    {
        return SIM800_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <send_command+0x2c>
    }

    return SIM800_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	20000000 	.word	0x20000000

0800126c <validate_message>:
 *
 * @param   *message: Pointer to the response message to be validated.
 * @retval  SIM800_OK if the message contains "OK," SIM800_ERROR otherwise.
 */
static SIM800_Status_t validate_message(char *message)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    if (strstr(message, "OK"))
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <validate_message+0x24>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f002 fb6b 	bl	8003952 <strstr>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <validate_message+0x1a>
    {
        return SIM800_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <validate_message+0x1c>
    }

    return SIM800_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800439c 	.word	0x0800439c

08001294 <wait_for_state>:
 * @param   state: The expected state to wait for in the pending message.
 * @param   index: The index of the expected message code to check.
 * @retval  SIM800_OK if the expected state is reached, SIM800_TIMEOUT if the timeout is reached.
 */
static SIM800_Status_t wait_for_state(SIM800_Handle_t *handle, SIM800_ExpectedCodeState_t state, uint8_t index)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
 80012a0:	4613      	mov	r3, r2
 80012a2:	70bb      	strb	r3, [r7, #2]
    uint32_t tickStart = HAL_GetTick();
 80012a4:	f000 fa98 	bl	80017d8 <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

    while (handle->expected_codes[index].state != state)
 80012aa:	e009      	b.n	80012c0 <wait_for_state+0x2c>
    {
        if (HAL_GetTick() - tickStart > SIM800_MAX_DELAY)
 80012ac:	f000 fa94 	bl	80017d8 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80012ba:	d901      	bls.n	80012c0 <wait_for_state+0x2c>
        {
            return SIM800_TIMEOUT;
 80012bc:	2302      	movs	r3, #2
 80012be:	e00c      	b.n	80012da <wait_for_state+0x46>
    while (handle->expected_codes[index].state != state)
 80012c0:	78ba      	ldrb	r2, [r7, #2]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	33e0      	adds	r3, #224	; 0xe0
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1e9      	bne.n	80012ac <wait_for_state+0x18>
        }
    }

    return SIM800_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <cmti_handler>:
 *
 * @param   *handle_ptr: Pointer to the SIM800 handle structure.
 * @param   msg_index: Index of the pending message associated with the +CMTI notification.
 */
static void cmti_handler(void *handle_ptr, uint32_t msg_index)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
    /*
     * +CMTI: <mem3>,<index>
     */
    SIM800_Handle_t *handle = (SIM800_Handle_t *)handle_ptr;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	617b      	str	r3, [r7, #20]
    char *ptr;
    uint32_t sms_index;

    ptr = strchr(handle->expected_codes[msg_index].data, ',');
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	015b      	lsls	r3, r3, #5
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3378      	adds	r3, #120	; 0x78
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4413      	add	r3, r2
 8001300:	3304      	adds	r3, #4
 8001302:	212c      	movs	r1, #44	; 0x2c
 8001304:	4618      	mov	r0, r3
 8001306:	f002 faf2 	bl	80038ee <strchr>
 800130a:	6138      	str	r0, [r7, #16]
    sms_index = strtol(++ptr, NULL, 10);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	3301      	adds	r3, #1
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	220a      	movs	r2, #10
 8001314:	2100      	movs	r1, #0
 8001316:	6938      	ldr	r0, [r7, #16]
 8001318:	f002 fa66 	bl	80037e8 <strtol>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]

    handle->expected_codes[msg_index].state = SIM800_WaitingFor;
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	015b      	lsls	r3, r3, #5
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	33e0      	adds	r3, #224	; 0xe0
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]

    SIM800_NewSMSNotificationCallBack(handle, sms_index);
 8001334:	68f9      	ldr	r1, [r7, #12]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff fa74 	bl	8000824 <SIM800_NewSMSNotificationCallBack>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <cmgr_handler>:
 *
 * @param   *handle_ptr: Pointer to the SIM800 handle structure.
 * @param   msg_index: Index of the pending message associated with the +CMGR response.
 */
static void cmgr_handler(void *handle_ptr, uint32_t msg_index)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    SIM800_Handle_t *handle = (SIM800_Handle_t *)handle_ptr;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
    SIM800_SMSMessage_t message = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2228      	movs	r2, #40	; 0x28
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fab0 	bl	80038c0 <memset>

    if (handle->expected_codes[msg_index].state != SIM800_ReceivedStatus)
 8001360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	4613      	mov	r3, r2
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	33e0      	adds	r3, #224	; 0xe0
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b04      	cmp	r3, #4
 8001374:	d11b      	bne.n	80013ae <cmgr_handler+0x6a>
    {
        return;
    }

    cmgr_parser(&message, handle->expected_codes[msg_index].data);
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	3378      	adds	r3, #120	; 0x78
 8001382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001384:	4413      	add	r3, r2
 8001386:	1d1a      	adds	r2, r3, #4
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f856 	bl	8001440 <cmgr_parser>

    SIM800_RcvdSMSCallBack(handle, &message);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800139c:	f7ff fa50 	bl	8000840 <SIM800_RcvdSMSCallBack>

    remove_expected_code(handle, msg_index);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013a8:	f7ff ff25 	bl	80011f6 <remove_expected_code>
 80013ac:	e000      	b.n	80013b0 <cmgr_handler+0x6c>
        return;
 80013ae:	bf00      	nop
}
 80013b0:	3738      	adds	r7, #56	; 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <cbc_parser>:
 * @param   *batt: Pointer to the SIM800_Battery_t structure to store the battery information.
 * @param   *message: The response message containing battery information.
 * @retval  SIM800_OK if the message is successfully parsed, SIM800_ERROR if an error occurs.
 */
static SIM800_Status_t cbc_parser(SIM800_Battery_t *batt, char *message)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
    /*
     * +CBC: <bcs>,<bcl>,<voltage>
     */
    char *ptr;

    if (validate_message(message) == SIM800_ERROR)
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff ff53 	bl	800126c <validate_message>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <cbc_parser+0x1a>
        return SIM800_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e033      	b.n	8001438 <cbc_parser+0x82>

    ptr = strchr(message, ':');
 80013d0:	213a      	movs	r1, #58	; 0x3a
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f002 fa8b 	bl	80038ee <strchr>
 80013d8:	60f8      	str	r0, [r7, #12]
    batt->charge_status = strtol(++ptr, NULL, 10);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	220a      	movs	r2, #10
 80013e2:	2100      	movs	r1, #0
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f002 f9ff 	bl	80037e8 <strtol>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	701a      	strb	r2, [r3, #0]

    ptr = strchr(ptr, ',');
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f002 fa7a 	bl	80038ee <strchr>
 80013fa:	60f8      	str	r0, [r7, #12]
    batt->conection_level = strtol(++ptr, NULL, 10);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	220a      	movs	r2, #10
 8001404:	2100      	movs	r1, #0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f002 f9ee 	bl	80037e8 <strtol>
 800140c:	4603      	mov	r3, r0
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	705a      	strb	r2, [r3, #1]

    ptr = strchr(ptr, ',');
 8001414:	212c      	movs	r1, #44	; 0x2c
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f002 fa69 	bl	80038ee <strchr>
 800141c:	60f8      	str	r0, [r7, #12]
    batt->battery_level = strtol(++ptr, NULL, 10);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	220a      	movs	r2, #10
 8001426:	2100      	movs	r1, #0
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f002 f9dd 	bl	80037e8 <strtol>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	805a      	strh	r2, [r3, #2]

    return SIM800_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <cmgr_parser>:
 *
 * @param   *sms_message: Pointer to the SIM800_SMSMessage_t structure to store the SMS message details.
 * @param   *message: The response message containing SMS message details.
 */
static void cmgr_parser(SIM800_SMSMessage_t *sms_message, char *message)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
     *	OK
     */
    char *ptr1, *ptr2;
    size_t len;

    if (validate_message(message) == SIM800_ERROR)
 800144a:	6838      	ldr	r0, [r7, #0]
 800144c:	f7ff ff0e 	bl	800126c <validate_message>
 8001450:	4603      	mov	r3, r0
 8001452:	2b01      	cmp	r3, #1
 8001454:	d038      	beq.n	80014c8 <cmgr_parser+0x88>
        return;

    ptr1 = strchr(message, '+');
 8001456:	212b      	movs	r1, #43	; 0x2b
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f002 fa48 	bl	80038ee <strchr>
 800145e:	6178      	str	r0, [r7, #20]
    ptr1 = strchr(++ptr1, '+');
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	212b      	movs	r1, #43	; 0x2b
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f002 fa40 	bl	80038ee <strchr>
 800146e:	6178      	str	r0, [r7, #20]

    ptr2 = strchr(ptr1, '"');
 8001470:	2122      	movs	r1, #34	; 0x22
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f002 fa3b 	bl	80038ee <strchr>
 8001478:	6138      	str	r0, [r7, #16]
    ptr2--;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3b01      	subs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]

    len = ptr2 - ptr1;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	60fb      	str	r3, [r7, #12]

    strncpy(sms_message->sender, ptr1, len);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	6979      	ldr	r1, [r7, #20]
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fa4c 	bl	800392c <strncpy>

    ptr1 = strchr(message, '\n');
 8001494:	210a      	movs	r1, #10
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f002 fa29 	bl	80038ee <strchr>
 800149c:	6178      	str	r0, [r7, #20]
    ptr1++;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]

    ptr2 = strchr(ptr1, '\n');
 80014a4:	210a      	movs	r1, #10
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f002 fa21 	bl	80038ee <strchr>
 80014ac:	6138      	str	r0, [r7, #16]

    len = ptr2 - ptr1 - 1;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]

    strncpy(sms_message->text, ptr1, len);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3314      	adds	r3, #20
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fa33 	bl	800392c <strncpy>
 80014c6:	e000      	b.n	80014ca <cmgr_parser+0x8a>
        return;
 80014c8:	bf00      	nop
}
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_MspInit+0x4c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x4c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_UART_MspInit+0x94>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d133      	bne.n	80015aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_UART_MspInit+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0x98>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_UART_MspInit+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_UART_MspInit+0x98>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_UART_MspInit+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157a:	230c      	movs	r3, #12
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158a:	2307      	movs	r3, #7
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <HAL_UART_MspInit+0x9c>)
 8001596:	f000 faf3 	bl	8001b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2026      	movs	r0, #38	; 0x26
 80015a0:	f000 fa25 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a4:	2026      	movs	r0, #38	; 0x26
 80015a6:	f000 fa3e 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f8d0 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART2_IRQHandler+0x10>)
 800161a:	f001 f94f 	bl	80028bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000080 	.word	0x20000080

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f002 f992 	bl	8003980 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20010000 	.word	0x20010000
 8001688:	00000400 	.word	0x00000400
 800168c:	2000067c 	.word	0x2000067c
 8001690:	200007d0 	.word	0x200007d0

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f002 f951 	bl	800398c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7fe ff5f 	bl	80005ac <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016fc:	0800452c 	.word	0x0800452c
  ldr r2, =_sbss
 8001700:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001704:	200007cc 	.word	0x200007cc

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fec6 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000010 	.word	0x20000010
 80017ac:	2000000c 	.word	0x2000000c

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000010 	.word	0x20000010
 80017d4:	20000680 	.word	0x20000680

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000680 	.word	0x20000680

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000010 	.word	0x20000010

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff feb6 	bl	80017d8 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e052      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0216 	bic.w	r2, r2, #22
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d103      	bne.n	8001abc <HAL_DMA_Abort+0x62>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0208 	bic.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001adc:	e013      	b.n	8001b06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ade:	f7ff fe7b 	bl	80017d8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d90c      	bls.n	8001b06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e015      	b.n	8001b32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e4      	bne.n	8001ade <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00c      	b.n	8001b72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	e159      	b.n	8001e50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f040 8148 	bne.w	8001e4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d005      	beq.n	8001bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d130      	bne.n	8001c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d017      	beq.n	8001c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d123      	bne.n	8001cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	69b9      	ldr	r1, [r7, #24]
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a2 	beq.w	8001e4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d22:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a49      	ldr	r2, [pc, #292]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x202>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x2f4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x1fe>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a47      	ldr	r2, [pc, #284]	; (8001e78 <HAL_GPIO_Init+0x2f8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x1fa>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_GPIO_Init+0x2fc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x1f6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <HAL_GPIO_Init+0x300>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x1f2>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d72:	2307      	movs	r3, #7
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x204>
 8001d82:	2300      	movs	r3, #0
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d94:	4935      	ldr	r1, [pc, #212]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_GPIO_Init+0x304>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	f67f aea2 	bls.w	8001b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e267      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea6:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d112      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d05b      	beq.n	8001f90 <HAL_RCC_OscConfig+0x108>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d157      	bne.n	8001f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e242      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d106      	bne.n	8001efc <HAL_RCC_OscConfig+0x74>
 8001eee:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6c      	ldr	r2, [pc, #432]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xb0>
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fc4a 	bl	80017d8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fc46 	bl	80017d8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e207      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xc0>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc36 	bl	80017d8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fc32 	bl	80017d8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1f3      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0xe8>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1c7      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fbeb 	bl	80017d8 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fbe7 	bl	80017d8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e1a8      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4925      	ldr	r1, [pc, #148]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fbca 	bl	80017d8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff fbc6 	bl	80017d8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e187      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d036      	beq.n	80020e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_RCC_OscConfig+0x248>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff fbaa 	bl	80017d8 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7ff fba6 	bl	80017d8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e167      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x240>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x200>
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x248>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fb93 	bl	80017d8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	e00e      	b.n	80020d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b6:	f7ff fb8f 	bl	80017d8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d907      	bls.n	80020d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e150      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	42470000 	.word	0x42470000
 80020d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ea      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8097 	beq.w	800221c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	4b7d      	ldr	r3, [pc, #500]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a7c      	ldr	r2, [pc, #496]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b77      	ldr	r3, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212a:	4b74      	ldr	r3, [pc, #464]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a73      	ldr	r2, [pc, #460]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7ff fb4f 	bl	80017d8 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7ff fb4b 	bl	80017d8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e10c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x474>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x2ea>
 8002164:	4b64      	ldr	r3, [pc, #400]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x30c>
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x324>
 8002194:	4b58      	ldr	r3, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a57      	ldr	r2, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b55      	ldr	r3, [pc, #340]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff fb10 	bl	80017d8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb0c 	bl	80017d8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0cb      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x334>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fafa 	bl	80017d8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7ff faf6 	bl	80017d8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b5      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220a:	7dfb      	ldrb	r3, [r7, #23]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b39      	ldr	r3, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a1 	beq.w	8002368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d05c      	beq.n	80022ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d141      	bne.n	80022be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff faca 	bl	80017d8 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fac6 	bl	80017d8 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e087      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	061b      	lsls	r3, r3, #24
 800228a:	491b      	ldr	r1, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fa9f 	bl	80017d8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff fa9b 	bl	80017d8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e05c      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x416>
 80022bc:	e054      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fa88 	bl	80017d8 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fa84 	bl	80017d8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e045      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x444>
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e038      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x4ec>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d028      	beq.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d121      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d11a      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002334:	4013      	ands	r3, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800233a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0cc      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b68      	ldr	r3, [pc, #416]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90c      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b65      	ldr	r3, [pc, #404]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b8      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e4:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	494d      	ldr	r1, [pc, #308]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d044      	beq.n	8002498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e07f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e067      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4934      	ldr	r1, [pc, #208]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002468:	f7ff f9b6 	bl	80017d8 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7ff f9b2 	bl	80017d8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e04f      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e032      	b.n	8002526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4916      	ldr	r1, [pc, #88]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	490e      	ldr	r1, [pc, #56]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fe:	f000 f821 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002502:	4602      	mov	r2, r0
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	490a      	ldr	r1, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	5ccb      	ldrb	r3, [r1, r3]
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f916 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023c00 	.word	0x40023c00
 8002534:	40023800 	.word	0x40023800
 8002538:	080043a8 	.word	0x080043a8
 800253c:	20000008 	.word	0x20000008
 8002540:	2000000c 	.word	0x2000000c

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002548:	b090      	sub	sp, #64	; 0x40
 800254a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
 8002550:	2300      	movs	r3, #0
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002554:	2300      	movs	r3, #0
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b08      	cmp	r3, #8
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x40>
 8002568:	2b08      	cmp	r3, #8
 800256a:	f200 80a1 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	e09b      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800257c:	e09b      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002582:	e098      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d028      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	2200      	movs	r2, #0
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	627a      	str	r2, [r7, #36]	; 0x24
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025ac:	2100      	movs	r1, #0
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 80025b0:	fb03 f201 	mul.w	r2, r3, r1
 80025b4:	2300      	movs	r3, #0
 80025b6:	fb00 f303 	mul.w	r3, r0, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_RCC_GetSysClockFreq+0x188>)
 80025be:	fba0 1202 	umull	r1, r2, r0, r2
 80025c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c4:	460a      	mov	r2, r1
 80025c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ca:	4413      	add	r3, r2
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	2200      	movs	r2, #0
 80025d2:	61bb      	str	r3, [r7, #24]
 80025d4:	61fa      	str	r2, [r7, #28]
 80025d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025de:	f7fd fe67 	bl	80002b0 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4613      	mov	r3, r2
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ea:	e053      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4b35      	ldr	r3, [pc, #212]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	617a      	str	r2, [r7, #20]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025fe:	f04f 0b00 	mov.w	fp, #0
 8002602:	4652      	mov	r2, sl
 8002604:	465b      	mov	r3, fp
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0159      	lsls	r1, r3, #5
 8002610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002614:	0150      	lsls	r0, r2, #5
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	ebb2 080a 	subs.w	r8, r2, sl
 800261e:	eb63 090b 	sbc.w	r9, r3, fp
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800262e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002636:	ebb2 0408 	subs.w	r4, r2, r8
 800263a:	eb63 0509 	sbc.w	r5, r3, r9
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	00eb      	lsls	r3, r5, #3
 8002648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264c:	00e2      	lsls	r2, r4, #3
 800264e:	4614      	mov	r4, r2
 8002650:	461d      	mov	r5, r3
 8002652:	eb14 030a 	adds.w	r3, r4, sl
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	eb45 030b 	adc.w	r3, r5, fp
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	2200      	movs	r2, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	60fa      	str	r2, [r7, #12]
 8002684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002688:	f7fd fe12 	bl	80002b0 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3740      	adds	r7, #64	; 0x40
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	017d7840 	.word	0x017d7840

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ec:	f7ff fff0 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0a9b      	lsrs	r3, r3, #10
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	080043b8 	.word	0x080043b8

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002714:	f7ff ffdc 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0b5b      	lsrs	r3, r3, #13
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	080043b8 	.word	0x080043b8

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e03f      	b.n	80027ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fede 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fd23 	bl	80031c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d130      	bne.n	800284e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_Transmit_IT+0x26>
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e029      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Transmit_IT+0x38>
 8002806:	2302      	movs	r3, #2
 8002808:	e022      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	; 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002848:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d11d      	bne.n	80028b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_Receive_IT+0x26>
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e016      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_UART_Receive_IT+0x38>
 8002890:	2302      	movs	r3, #2
 8002892:	e00f      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab5 	bl	8002e18 <UART_Start_Receive_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	e000      	b.n	80028b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0ba      	sub	sp, #232	; 0xe8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80028fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_UART_IRQHandler+0x66>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fb99 	bl	8003052 <UART_Receive_IT>
      return;
 8002920:	e256      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80de 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x22c>
 800292c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80d1 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_UART_IRQHandler+0xae>
 8002952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
 8002976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_UART_IRQHandler+0xf6>
 800299a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d011      	beq.n	80029e2 <HAL_UART_IRQHandler+0x126>
 80029be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0208 	orr.w	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 81ed 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_UART_IRQHandler+0x14e>
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb24 	bl	8003052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_UART_IRQHandler+0x17a>
 8002a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d04f      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa2c 	bl	8002e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d141      	bne.n	8002ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1d9      	bne.n	8002a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d013      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	; (8002c98 <HAL_UART_IRQHandler+0x3dc>)
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f845 	bl	8001b3a <HAL_DMA_Abort_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	e00e      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f990 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	e00a      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f98c 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	e006      	b.n	8002ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f988 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ae2:	e170      	b.n	8002dc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	bf00      	nop
    return;
 8002ae6:	e16e      	b.n	8002dc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 814a 	bne.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8143 	beq.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 813c 	beq.w	8002d86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	f040 80b4 	bne.w	8002c9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8140 	beq.w	8002dca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f080 8139 	bcs.w	8002dca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	f000 8088 	beq.w	8002c7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1d9      	bne.n	8002b6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002be2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e1      	bne.n	8002bba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3314      	adds	r3, #20
 8002bfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c00:	e853 3f00 	ldrex	r3, [r3]
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3314      	adds	r3, #20
 8002c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e3      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c60:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e3      	bne.n	8002c3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe feee 	bl	8001a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8b6 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c94:	e099      	b.n	8002dca <HAL_UART_IRQHandler+0x50e>
 8002c96:	bf00      	nop
 8002c98:	08002f5b 	.word	0x08002f5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 808b 	beq.w	8002dce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8086 	beq.w	8002dce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e3      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3314      	adds	r3, #20
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	623b      	str	r3, [r7, #32]
   return(result);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e3      	bne.n	8002cfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0310 	bic.w	r3, r3, #16
 8002d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	69b9      	ldr	r1, [r7, #24]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	617b      	str	r3, [r7, #20]
   return(result);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e3      	bne.n	8002d40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f83e 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d84:	e023      	b.n	8002dce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_UART_IRQHandler+0x4ea>
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8ef 	bl	8002f82 <UART_Transmit_IT>
    return;
 8002da4:	e014      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x514>
 8002db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f92f 	bl	8003022 <UART_EndTransmit_IT>
    return;
 8002dc4:	e004      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
    return;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	37e8      	adds	r7, #232	; 0xe8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop

08002dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2222      	movs	r2, #34	; 0x22
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0220 	orr.w	r2, r2, #32
 8002e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b095      	sub	sp, #84	; 0x54
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ebc:	643a      	str	r2, [r7, #64]	; 0x40
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e5      	bne.n	8002e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d119      	bne.n	8002f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0310 	bic.w	r3, r3, #16
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f2c:	61ba      	str	r2, [r7, #24]
 8002f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6979      	ldr	r1, [r7, #20]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f4e:	bf00      	nop
 8002f50:	3754      	adds	r7, #84	; 0x54
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ff39 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b21      	cmp	r3, #33	; 0x21
 8002f94:	d13e      	bne.n	8003014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d114      	bne.n	8002fca <UART_Transmit_IT+0x48>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d110      	bne.n	8002fca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	1c9a      	adds	r2, r3, #2
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	e008      	b.n	8002fdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	1c59      	adds	r1, r3, #1
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6211      	str	r1, [r2, #32]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fec8 	bl	8002dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b08c      	sub	sp, #48	; 0x30
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b22      	cmp	r3, #34	; 0x22
 8003064:	f040 80ab 	bne.w	80031be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d117      	bne.n	80030a2 <UART_Receive_IT+0x50>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d113      	bne.n	80030a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	b29b      	uxth	r3, r3
 800308c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003090:	b29a      	uxth	r2, r3
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e026      	b.n	80030f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	d007      	beq.n	80030c6 <UART_Receive_IT+0x74>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <UART_Receive_IT+0x82>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e008      	b.n	80030e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4619      	mov	r1, r3
 80030fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003100:	2b00      	cmp	r3, #0
 8003102:	d15a      	bne.n	80031ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0220 	bic.w	r2, r2, #32
 8003112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	2b01      	cmp	r3, #1
 8003142:	d135      	bne.n	80031b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	613b      	str	r3, [r7, #16]
   return(result);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 0310 	bic.w	r3, r3, #16
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	623a      	str	r2, [r7, #32]
 800316c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316e:	69f9      	ldr	r1, [r7, #28]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	61bb      	str	r3, [r7, #24]
   return(result);
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1e5      	bne.n	800314a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	d10a      	bne.n	80031a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fe29 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
 80031ae:	e002      	b.n	80031b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fb23 	bl	80007fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e002      	b.n	80031c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3730      	adds	r7, #48	; 0x30
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b0c0      	sub	sp, #256	; 0x100
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	68d9      	ldr	r1, [r3, #12]
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	ea40 0301 	orr.w	r3, r0, r1
 80031f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	431a      	orrs	r2, r3
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003220:	f021 010c 	bic.w	r1, r1, #12
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800322e:	430b      	orrs	r3, r1
 8003230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	6999      	ldr	r1, [r3, #24]
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	ea40 0301 	orr.w	r3, r0, r1
 800324e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b8f      	ldr	r3, [pc, #572]	; (8003494 <UART_SetConfig+0x2cc>)
 8003258:	429a      	cmp	r2, r3
 800325a:	d005      	beq.n	8003268 <UART_SetConfig+0xa0>
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <UART_SetConfig+0x2d0>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d104      	bne.n	8003272 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7ff fa52 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 800326c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003270:	e003      	b.n	800327a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003272:	f7ff fa39 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 8003276:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003284:	f040 810c 	bne.w	80034a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003292:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003296:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80032a2:	415b      	adcs	r3, r3
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032aa:	4621      	mov	r1, r4
 80032ac:	eb12 0801 	adds.w	r8, r2, r1
 80032b0:	4629      	mov	r1, r5
 80032b2:	eb43 0901 	adc.w	r9, r3, r1
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	eb18 0303 	adds.w	r3, r8, r3
 80032d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032d8:	462b      	mov	r3, r5
 80032da:	eb49 0303 	adc.w	r3, r9, r3
 80032de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032f6:	460b      	mov	r3, r1
 80032f8:	18db      	adds	r3, r3, r3
 80032fa:	653b      	str	r3, [r7, #80]	; 0x50
 80032fc:	4613      	mov	r3, r2
 80032fe:	eb42 0303 	adc.w	r3, r2, r3
 8003302:	657b      	str	r3, [r7, #84]	; 0x54
 8003304:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003308:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800330c:	f7fc ffd0 	bl	80002b0 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <UART_SetConfig+0x2d4>)
 8003316:	fba3 2302 	umull	r2, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	011c      	lsls	r4, r3, #4
 800331e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003328:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800332c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	1891      	adds	r1, r2, r2
 8003336:	64b9      	str	r1, [r7, #72]	; 0x48
 8003338:	415b      	adcs	r3, r3
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003340:	4641      	mov	r1, r8
 8003342:	eb12 0a01 	adds.w	sl, r2, r1
 8003346:	4649      	mov	r1, r9
 8003348:	eb43 0b01 	adc.w	fp, r3, r1
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003358:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800335c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003360:	4692      	mov	sl, r2
 8003362:	469b      	mov	fp, r3
 8003364:	4643      	mov	r3, r8
 8003366:	eb1a 0303 	adds.w	r3, sl, r3
 800336a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800336e:	464b      	mov	r3, r9
 8003370:	eb4b 0303 	adc.w	r3, fp, r3
 8003374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003384:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003388:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800338c:	460b      	mov	r3, r1
 800338e:	18db      	adds	r3, r3, r3
 8003390:	643b      	str	r3, [r7, #64]	; 0x40
 8003392:	4613      	mov	r3, r2
 8003394:	eb42 0303 	adc.w	r3, r2, r3
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800339e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033a2:	f7fc ff85 	bl	80002b0 <__aeabi_uldivmod>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	4b3b      	ldr	r3, [pc, #236]	; (800349c <UART_SetConfig+0x2d4>)
 80033ae:	fba3 2301 	umull	r2, r3, r3, r1
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2264      	movs	r2, #100	; 0x64
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	1acb      	subs	r3, r1, r3
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <UART_SetConfig+0x2d4>)
 80033c4:	fba3 2302 	umull	r2, r3, r3, r2
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033d0:	441c      	add	r4, r3
 80033d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80033ec:	415b      	adcs	r3, r3
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033f4:	4641      	mov	r1, r8
 80033f6:	1851      	adds	r1, r2, r1
 80033f8:	6339      	str	r1, [r7, #48]	; 0x30
 80033fa:	4649      	mov	r1, r9
 80033fc:	414b      	adcs	r3, r1
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800340c:	4659      	mov	r1, fp
 800340e:	00cb      	lsls	r3, r1, #3
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003416:	4651      	mov	r1, sl
 8003418:	00ca      	lsls	r2, r1, #3
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	4603      	mov	r3, r0
 8003420:	4642      	mov	r2, r8
 8003422:	189b      	adds	r3, r3, r2
 8003424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003428:	464b      	mov	r3, r9
 800342a:	460a      	mov	r2, r1
 800342c:	eb42 0303 	adc.w	r3, r2, r3
 8003430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003440:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003444:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003448:	460b      	mov	r3, r1
 800344a:	18db      	adds	r3, r3, r3
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	4613      	mov	r3, r2
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003456:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800345a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800345e:	f7fc ff27 	bl	80002b0 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <UART_SetConfig+0x2d4>)
 8003468:	fba3 1302 	umull	r1, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2164      	movs	r1, #100	; 0x64
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3332      	adds	r3, #50	; 0x32
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <UART_SetConfig+0x2d4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4422      	add	r2, r4
 800348e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003490:	e106      	b.n	80036a0 <UART_SetConfig+0x4d8>
 8003492:	bf00      	nop
 8003494:	40011000 	.word	0x40011000
 8003498:	40011400 	.word	0x40011400
 800349c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a4:	2200      	movs	r2, #0
 80034a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034b2:	4642      	mov	r2, r8
 80034b4:	464b      	mov	r3, r9
 80034b6:	1891      	adds	r1, r2, r2
 80034b8:	6239      	str	r1, [r7, #32]
 80034ba:	415b      	adcs	r3, r3
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034c2:	4641      	mov	r1, r8
 80034c4:	1854      	adds	r4, r2, r1
 80034c6:	4649      	mov	r1, r9
 80034c8:	eb43 0501 	adc.w	r5, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034e8:	464b      	mov	r3, r9
 80034ea:	eb45 0303 	adc.w	r3, r5, r3
 80034ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800350e:	4629      	mov	r1, r5
 8003510:	008b      	lsls	r3, r1, #2
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003518:	4621      	mov	r1, r4
 800351a:	008a      	lsls	r2, r1, #2
 800351c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003520:	f7fc fec6 	bl	80002b0 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b60      	ldr	r3, [pc, #384]	; (80036ac <UART_SetConfig+0x4e4>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	011c      	lsls	r4, r3, #4
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800353c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003540:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	61b9      	str	r1, [r7, #24]
 800354c:	415b      	adcs	r3, r3
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003554:	4641      	mov	r1, r8
 8003556:	1851      	adds	r1, r2, r1
 8003558:	6139      	str	r1, [r7, #16]
 800355a:	4649      	mov	r1, r9
 800355c:	414b      	adcs	r3, r1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800356c:	4659      	mov	r1, fp
 800356e:	00cb      	lsls	r3, r1, #3
 8003570:	4651      	mov	r1, sl
 8003572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003576:	4651      	mov	r1, sl
 8003578:	00ca      	lsls	r2, r1, #3
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	4603      	mov	r3, r0
 8003580:	4642      	mov	r2, r8
 8003582:	189b      	adds	r3, r3, r2
 8003584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003588:	464b      	mov	r3, r9
 800358a:	460a      	mov	r2, r1
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	67bb      	str	r3, [r7, #120]	; 0x78
 800359e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035ac:	4649      	mov	r1, r9
 80035ae:	008b      	lsls	r3, r1, #2
 80035b0:	4641      	mov	r1, r8
 80035b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b6:	4641      	mov	r1, r8
 80035b8:	008a      	lsls	r2, r1, #2
 80035ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035be:	f7fc fe77 	bl	80002b0 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	4b38      	ldr	r3, [pc, #224]	; (80036ac <UART_SetConfig+0x4e4>)
 80035ca:	fba3 2301 	umull	r2, r3, r3, r1
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2264      	movs	r2, #100	; 0x64
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	1acb      	subs	r3, r1, r3
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	3332      	adds	r3, #50	; 0x32
 80035dc:	4a33      	ldr	r2, [pc, #204]	; (80036ac <UART_SetConfig+0x4e4>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e8:	441c      	add	r4, r3
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ee:	2200      	movs	r2, #0
 80035f0:	673b      	str	r3, [r7, #112]	; 0x70
 80035f2:	677a      	str	r2, [r7, #116]	; 0x74
 80035f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	415b      	adcs	r3, r3
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	66bb      	str	r3, [r7, #104]	; 0x68
 800363a:	464b      	mov	r3, r9
 800363c:	460a      	mov	r2, r1
 800363e:	eb42 0303 	adc.w	r3, r2, r3
 8003642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	663b      	str	r3, [r7, #96]	; 0x60
 800364e:	667a      	str	r2, [r7, #100]	; 0x64
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800365c:	4649      	mov	r1, r9
 800365e:	008b      	lsls	r3, r1, #2
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003666:	4641      	mov	r1, r8
 8003668:	008a      	lsls	r2, r1, #2
 800366a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800366e:	f7fc fe1f 	bl	80002b0 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <UART_SetConfig+0x4e4>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <UART_SetConfig+0x4e4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4422      	add	r2, r4
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ac:	51eb851f 	.word	0x51eb851f

080036b0 <__itoa>:
 80036b0:	1e93      	subs	r3, r2, #2
 80036b2:	2b22      	cmp	r3, #34	; 0x22
 80036b4:	b510      	push	{r4, lr}
 80036b6:	460c      	mov	r4, r1
 80036b8:	d904      	bls.n	80036c4 <__itoa+0x14>
 80036ba:	2300      	movs	r3, #0
 80036bc:	700b      	strb	r3, [r1, #0]
 80036be:	461c      	mov	r4, r3
 80036c0:	4620      	mov	r0, r4
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	2a0a      	cmp	r2, #10
 80036c6:	d109      	bne.n	80036dc <__itoa+0x2c>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	da07      	bge.n	80036dc <__itoa+0x2c>
 80036cc:	232d      	movs	r3, #45	; 0x2d
 80036ce:	700b      	strb	r3, [r1, #0]
 80036d0:	4240      	negs	r0, r0
 80036d2:	2101      	movs	r1, #1
 80036d4:	4421      	add	r1, r4
 80036d6:	f000 f891 	bl	80037fc <__utoa>
 80036da:	e7f1      	b.n	80036c0 <__itoa+0x10>
 80036dc:	2100      	movs	r1, #0
 80036de:	e7f9      	b.n	80036d4 <__itoa+0x24>

080036e0 <itoa>:
 80036e0:	f7ff bfe6 	b.w	80036b0 <__itoa>

080036e4 <_strtol_l.constprop.0>:
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ea:	d001      	beq.n	80036f0 <_strtol_l.constprop.0+0xc>
 80036ec:	2b24      	cmp	r3, #36	; 0x24
 80036ee:	d906      	bls.n	80036fe <_strtol_l.constprop.0+0x1a>
 80036f0:	f000 f946 	bl	8003980 <__errno>
 80036f4:	2316      	movs	r3, #22
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	2000      	movs	r0, #0
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80037e4 <_strtol_l.constprop.0+0x100>
 8003702:	460d      	mov	r5, r1
 8003704:	462e      	mov	r6, r5
 8003706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800370a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800370e:	f017 0708 	ands.w	r7, r7, #8
 8003712:	d1f7      	bne.n	8003704 <_strtol_l.constprop.0+0x20>
 8003714:	2c2d      	cmp	r4, #45	; 0x2d
 8003716:	d132      	bne.n	800377e <_strtol_l.constprop.0+0x9a>
 8003718:	782c      	ldrb	r4, [r5, #0]
 800371a:	2701      	movs	r7, #1
 800371c:	1cb5      	adds	r5, r6, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d05b      	beq.n	80037da <_strtol_l.constprop.0+0xf6>
 8003722:	2b10      	cmp	r3, #16
 8003724:	d109      	bne.n	800373a <_strtol_l.constprop.0+0x56>
 8003726:	2c30      	cmp	r4, #48	; 0x30
 8003728:	d107      	bne.n	800373a <_strtol_l.constprop.0+0x56>
 800372a:	782c      	ldrb	r4, [r5, #0]
 800372c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003730:	2c58      	cmp	r4, #88	; 0x58
 8003732:	d14d      	bne.n	80037d0 <_strtol_l.constprop.0+0xec>
 8003734:	786c      	ldrb	r4, [r5, #1]
 8003736:	2310      	movs	r3, #16
 8003738:	3502      	adds	r5, #2
 800373a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800373e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003742:	f04f 0e00 	mov.w	lr, #0
 8003746:	fbb8 f9f3 	udiv	r9, r8, r3
 800374a:	4676      	mov	r6, lr
 800374c:	fb03 8a19 	mls	sl, r3, r9, r8
 8003750:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003754:	f1bc 0f09 	cmp.w	ip, #9
 8003758:	d816      	bhi.n	8003788 <_strtol_l.constprop.0+0xa4>
 800375a:	4664      	mov	r4, ip
 800375c:	42a3      	cmp	r3, r4
 800375e:	dd24      	ble.n	80037aa <_strtol_l.constprop.0+0xc6>
 8003760:	f1be 3fff 	cmp.w	lr, #4294967295
 8003764:	d008      	beq.n	8003778 <_strtol_l.constprop.0+0x94>
 8003766:	45b1      	cmp	r9, r6
 8003768:	d31c      	bcc.n	80037a4 <_strtol_l.constprop.0+0xc0>
 800376a:	d101      	bne.n	8003770 <_strtol_l.constprop.0+0x8c>
 800376c:	45a2      	cmp	sl, r4
 800376e:	db19      	blt.n	80037a4 <_strtol_l.constprop.0+0xc0>
 8003770:	fb06 4603 	mla	r6, r6, r3, r4
 8003774:	f04f 0e01 	mov.w	lr, #1
 8003778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800377c:	e7e8      	b.n	8003750 <_strtol_l.constprop.0+0x6c>
 800377e:	2c2b      	cmp	r4, #43	; 0x2b
 8003780:	bf04      	itt	eq
 8003782:	782c      	ldrbeq	r4, [r5, #0]
 8003784:	1cb5      	addeq	r5, r6, #2
 8003786:	e7ca      	b.n	800371e <_strtol_l.constprop.0+0x3a>
 8003788:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800378c:	f1bc 0f19 	cmp.w	ip, #25
 8003790:	d801      	bhi.n	8003796 <_strtol_l.constprop.0+0xb2>
 8003792:	3c37      	subs	r4, #55	; 0x37
 8003794:	e7e2      	b.n	800375c <_strtol_l.constprop.0+0x78>
 8003796:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800379a:	f1bc 0f19 	cmp.w	ip, #25
 800379e:	d804      	bhi.n	80037aa <_strtol_l.constprop.0+0xc6>
 80037a0:	3c57      	subs	r4, #87	; 0x57
 80037a2:	e7db      	b.n	800375c <_strtol_l.constprop.0+0x78>
 80037a4:	f04f 3eff 	mov.w	lr, #4294967295
 80037a8:	e7e6      	b.n	8003778 <_strtol_l.constprop.0+0x94>
 80037aa:	f1be 3fff 	cmp.w	lr, #4294967295
 80037ae:	d105      	bne.n	80037bc <_strtol_l.constprop.0+0xd8>
 80037b0:	2322      	movs	r3, #34	; 0x22
 80037b2:	6003      	str	r3, [r0, #0]
 80037b4:	4646      	mov	r6, r8
 80037b6:	b942      	cbnz	r2, 80037ca <_strtol_l.constprop.0+0xe6>
 80037b8:	4630      	mov	r0, r6
 80037ba:	e79e      	b.n	80036fa <_strtol_l.constprop.0+0x16>
 80037bc:	b107      	cbz	r7, 80037c0 <_strtol_l.constprop.0+0xdc>
 80037be:	4276      	negs	r6, r6
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	d0f9      	beq.n	80037b8 <_strtol_l.constprop.0+0xd4>
 80037c4:	f1be 0f00 	cmp.w	lr, #0
 80037c8:	d000      	beq.n	80037cc <_strtol_l.constprop.0+0xe8>
 80037ca:	1e69      	subs	r1, r5, #1
 80037cc:	6011      	str	r1, [r2, #0]
 80037ce:	e7f3      	b.n	80037b8 <_strtol_l.constprop.0+0xd4>
 80037d0:	2430      	movs	r4, #48	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1b1      	bne.n	800373a <_strtol_l.constprop.0+0x56>
 80037d6:	2308      	movs	r3, #8
 80037d8:	e7af      	b.n	800373a <_strtol_l.constprop.0+0x56>
 80037da:	2c30      	cmp	r4, #48	; 0x30
 80037dc:	d0a5      	beq.n	800372a <_strtol_l.constprop.0+0x46>
 80037de:	230a      	movs	r3, #10
 80037e0:	e7ab      	b.n	800373a <_strtol_l.constprop.0+0x56>
 80037e2:	bf00      	nop
 80037e4:	080043e6 	.word	0x080043e6

080037e8 <strtol>:
 80037e8:	4613      	mov	r3, r2
 80037ea:	460a      	mov	r2, r1
 80037ec:	4601      	mov	r1, r0
 80037ee:	4802      	ldr	r0, [pc, #8]	; (80037f8 <strtol+0x10>)
 80037f0:	6800      	ldr	r0, [r0, #0]
 80037f2:	f7ff bf77 	b.w	80036e4 <_strtol_l.constprop.0>
 80037f6:	bf00      	nop
 80037f8:	20000060 	.word	0x20000060

080037fc <__utoa>:
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	4c1f      	ldr	r4, [pc, #124]	; (800387c <__utoa+0x80>)
 8003800:	b08b      	sub	sp, #44	; 0x2c
 8003802:	4605      	mov	r5, r0
 8003804:	460b      	mov	r3, r1
 8003806:	466e      	mov	r6, sp
 8003808:	f104 0c20 	add.w	ip, r4, #32
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	6861      	ldr	r1, [r4, #4]
 8003810:	4637      	mov	r7, r6
 8003812:	c703      	stmia	r7!, {r0, r1}
 8003814:	3408      	adds	r4, #8
 8003816:	4564      	cmp	r4, ip
 8003818:	463e      	mov	r6, r7
 800381a:	d1f7      	bne.n	800380c <__utoa+0x10>
 800381c:	7921      	ldrb	r1, [r4, #4]
 800381e:	7139      	strb	r1, [r7, #4]
 8003820:	1e91      	subs	r1, r2, #2
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	6038      	str	r0, [r7, #0]
 8003826:	2922      	cmp	r1, #34	; 0x22
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	d904      	bls.n	8003838 <__utoa+0x3c>
 800382e:	7019      	strb	r1, [r3, #0]
 8003830:	460b      	mov	r3, r1
 8003832:	4618      	mov	r0, r3
 8003834:	b00b      	add	sp, #44	; 0x2c
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003838:	1e58      	subs	r0, r3, #1
 800383a:	4684      	mov	ip, r0
 800383c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003840:	fb02 5617 	mls	r6, r2, r7, r5
 8003844:	3628      	adds	r6, #40	; 0x28
 8003846:	446e      	add	r6, sp
 8003848:	460c      	mov	r4, r1
 800384a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800384e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003852:	462e      	mov	r6, r5
 8003854:	42b2      	cmp	r2, r6
 8003856:	f101 0101 	add.w	r1, r1, #1
 800385a:	463d      	mov	r5, r7
 800385c:	d9ee      	bls.n	800383c <__utoa+0x40>
 800385e:	2200      	movs	r2, #0
 8003860:	545a      	strb	r2, [r3, r1]
 8003862:	1919      	adds	r1, r3, r4
 8003864:	1aa5      	subs	r5, r4, r2
 8003866:	42aa      	cmp	r2, r5
 8003868:	dae3      	bge.n	8003832 <__utoa+0x36>
 800386a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800386e:	780e      	ldrb	r6, [r1, #0]
 8003870:	7006      	strb	r6, [r0, #0]
 8003872:	3201      	adds	r2, #1
 8003874:	f801 5901 	strb.w	r5, [r1], #-1
 8003878:	e7f4      	b.n	8003864 <__utoa+0x68>
 800387a:	bf00      	nop
 800387c:	080043c0 	.word	0x080043c0

08003880 <siprintf>:
 8003880:	b40e      	push	{r1, r2, r3}
 8003882:	b500      	push	{lr}
 8003884:	b09c      	sub	sp, #112	; 0x70
 8003886:	ab1d      	add	r3, sp, #116	; 0x74
 8003888:	9002      	str	r0, [sp, #8]
 800388a:	9006      	str	r0, [sp, #24]
 800388c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <siprintf+0x38>)
 8003892:	9107      	str	r1, [sp, #28]
 8003894:	9104      	str	r1, [sp, #16]
 8003896:	4909      	ldr	r1, [pc, #36]	; (80038bc <siprintf+0x3c>)
 8003898:	f853 2b04 	ldr.w	r2, [r3], #4
 800389c:	9105      	str	r1, [sp, #20]
 800389e:	6800      	ldr	r0, [r0, #0]
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	a902      	add	r1, sp, #8
 80038a4:	f000 f9f2 	bl	8003c8c <_svfiprintf_r>
 80038a8:	9b02      	ldr	r3, [sp, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	b01c      	add	sp, #112	; 0x70
 80038b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038b4:	b003      	add	sp, #12
 80038b6:	4770      	bx	lr
 80038b8:	20000060 	.word	0x20000060
 80038bc:	ffff0208 	.word	0xffff0208

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <strcat>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4602      	mov	r2, r0
 80038d4:	7814      	ldrb	r4, [r2, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	3201      	adds	r2, #1
 80038da:	2c00      	cmp	r4, #0
 80038dc:	d1fa      	bne.n	80038d4 <strcat+0x4>
 80038de:	3b01      	subs	r3, #1
 80038e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038e8:	2a00      	cmp	r2, #0
 80038ea:	d1f9      	bne.n	80038e0 <strcat+0x10>
 80038ec:	bd10      	pop	{r4, pc}

080038ee <strchr>:
 80038ee:	b2c9      	uxtb	r1, r1
 80038f0:	4603      	mov	r3, r0
 80038f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038f6:	b11a      	cbz	r2, 8003900 <strchr+0x12>
 80038f8:	428a      	cmp	r2, r1
 80038fa:	d1f9      	bne.n	80038f0 <strchr+0x2>
 80038fc:	4618      	mov	r0, r3
 80038fe:	4770      	bx	lr
 8003900:	2900      	cmp	r1, #0
 8003902:	bf18      	it	ne
 8003904:	2300      	movne	r3, #0
 8003906:	e7f9      	b.n	80038fc <strchr+0xe>

08003908 <strncmp>:
 8003908:	b510      	push	{r4, lr}
 800390a:	b16a      	cbz	r2, 8003928 <strncmp+0x20>
 800390c:	3901      	subs	r1, #1
 800390e:	1884      	adds	r4, r0, r2
 8003910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003914:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003918:	429a      	cmp	r2, r3
 800391a:	d103      	bne.n	8003924 <strncmp+0x1c>
 800391c:	42a0      	cmp	r0, r4
 800391e:	d001      	beq.n	8003924 <strncmp+0x1c>
 8003920:	2a00      	cmp	r2, #0
 8003922:	d1f5      	bne.n	8003910 <strncmp+0x8>
 8003924:	1ad0      	subs	r0, r2, r3
 8003926:	bd10      	pop	{r4, pc}
 8003928:	4610      	mov	r0, r2
 800392a:	e7fc      	b.n	8003926 <strncmp+0x1e>

0800392c <strncpy>:
 800392c:	b510      	push	{r4, lr}
 800392e:	3901      	subs	r1, #1
 8003930:	4603      	mov	r3, r0
 8003932:	b132      	cbz	r2, 8003942 <strncpy+0x16>
 8003934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003938:	f803 4b01 	strb.w	r4, [r3], #1
 800393c:	3a01      	subs	r2, #1
 800393e:	2c00      	cmp	r4, #0
 8003940:	d1f7      	bne.n	8003932 <strncpy+0x6>
 8003942:	441a      	add	r2, r3
 8003944:	2100      	movs	r1, #0
 8003946:	4293      	cmp	r3, r2
 8003948:	d100      	bne.n	800394c <strncpy+0x20>
 800394a:	bd10      	pop	{r4, pc}
 800394c:	f803 1b01 	strb.w	r1, [r3], #1
 8003950:	e7f9      	b.n	8003946 <strncpy+0x1a>

08003952 <strstr>:
 8003952:	780a      	ldrb	r2, [r1, #0]
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b96a      	cbnz	r2, 8003974 <strstr+0x22>
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	429a      	cmp	r2, r3
 800395c:	d109      	bne.n	8003972 <strstr+0x20>
 800395e:	460c      	mov	r4, r1
 8003960:	4605      	mov	r5, r0
 8003962:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f6      	beq.n	8003958 <strstr+0x6>
 800396a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800396e:	429e      	cmp	r6, r3
 8003970:	d0f7      	beq.n	8003962 <strstr+0x10>
 8003972:	3001      	adds	r0, #1
 8003974:	7803      	ldrb	r3, [r0, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <strstr+0x8>
 800397a:	4618      	mov	r0, r3
 800397c:	e7ec      	b.n	8003958 <strstr+0x6>
	...

08003980 <__errno>:
 8003980:	4b01      	ldr	r3, [pc, #4]	; (8003988 <__errno+0x8>)
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000060 	.word	0x20000060

0800398c <__libc_init_array>:
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4d0d      	ldr	r5, [pc, #52]	; (80039c4 <__libc_init_array+0x38>)
 8003990:	4c0d      	ldr	r4, [pc, #52]	; (80039c8 <__libc_init_array+0x3c>)
 8003992:	1b64      	subs	r4, r4, r5
 8003994:	10a4      	asrs	r4, r4, #2
 8003996:	2600      	movs	r6, #0
 8003998:	42a6      	cmp	r6, r4
 800399a:	d109      	bne.n	80039b0 <__libc_init_array+0x24>
 800399c:	4d0b      	ldr	r5, [pc, #44]	; (80039cc <__libc_init_array+0x40>)
 800399e:	4c0c      	ldr	r4, [pc, #48]	; (80039d0 <__libc_init_array+0x44>)
 80039a0:	f000 fc72 	bl	8004288 <_init>
 80039a4:	1b64      	subs	r4, r4, r5
 80039a6:	10a4      	asrs	r4, r4, #2
 80039a8:	2600      	movs	r6, #0
 80039aa:	42a6      	cmp	r6, r4
 80039ac:	d105      	bne.n	80039ba <__libc_init_array+0x2e>
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b4:	4798      	blx	r3
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7ee      	b.n	8003998 <__libc_init_array+0xc>
 80039ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80039be:	4798      	blx	r3
 80039c0:	3601      	adds	r6, #1
 80039c2:	e7f2      	b.n	80039aa <__libc_init_array+0x1e>
 80039c4:	08004524 	.word	0x08004524
 80039c8:	08004524 	.word	0x08004524
 80039cc:	08004524 	.word	0x08004524
 80039d0:	08004528 	.word	0x08004528

080039d4 <__retarget_lock_acquire_recursive>:
 80039d4:	4770      	bx	lr

080039d6 <__retarget_lock_release_recursive>:
 80039d6:	4770      	bx	lr

080039d8 <strcpy>:
 80039d8:	4603      	mov	r3, r0
 80039da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039de:	f803 2b01 	strb.w	r2, [r3], #1
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	d1f9      	bne.n	80039da <strcpy+0x2>
 80039e6:	4770      	bx	lr

080039e8 <_free_r>:
 80039e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d044      	beq.n	8003a78 <_free_r+0x90>
 80039ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f1a1 0404 	sub.w	r4, r1, #4
 80039fa:	bfb8      	it	lt
 80039fc:	18e4      	addlt	r4, r4, r3
 80039fe:	f000 f8df 	bl	8003bc0 <__malloc_lock>
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <_free_r+0x94>)
 8003a04:	9801      	ldr	r0, [sp, #4]
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	b933      	cbnz	r3, 8003a18 <_free_r+0x30>
 8003a0a:	6063      	str	r3, [r4, #4]
 8003a0c:	6014      	str	r4, [r2, #0]
 8003a0e:	b003      	add	sp, #12
 8003a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a14:	f000 b8da 	b.w	8003bcc <__malloc_unlock>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d908      	bls.n	8003a2e <_free_r+0x46>
 8003a1c:	6825      	ldr	r5, [r4, #0]
 8003a1e:	1961      	adds	r1, r4, r5
 8003a20:	428b      	cmp	r3, r1
 8003a22:	bf01      	itttt	eq
 8003a24:	6819      	ldreq	r1, [r3, #0]
 8003a26:	685b      	ldreq	r3, [r3, #4]
 8003a28:	1949      	addeq	r1, r1, r5
 8003a2a:	6021      	streq	r1, [r4, #0]
 8003a2c:	e7ed      	b.n	8003a0a <_free_r+0x22>
 8003a2e:	461a      	mov	r2, r3
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b10b      	cbz	r3, 8003a38 <_free_r+0x50>
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d9fa      	bls.n	8003a2e <_free_r+0x46>
 8003a38:	6811      	ldr	r1, [r2, #0]
 8003a3a:	1855      	adds	r5, r2, r1
 8003a3c:	42a5      	cmp	r5, r4
 8003a3e:	d10b      	bne.n	8003a58 <_free_r+0x70>
 8003a40:	6824      	ldr	r4, [r4, #0]
 8003a42:	4421      	add	r1, r4
 8003a44:	1854      	adds	r4, r2, r1
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	d1e0      	bne.n	8003a0e <_free_r+0x26>
 8003a4c:	681c      	ldr	r4, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	6053      	str	r3, [r2, #4]
 8003a52:	440c      	add	r4, r1
 8003a54:	6014      	str	r4, [r2, #0]
 8003a56:	e7da      	b.n	8003a0e <_free_r+0x26>
 8003a58:	d902      	bls.n	8003a60 <_free_r+0x78>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	6003      	str	r3, [r0, #0]
 8003a5e:	e7d6      	b.n	8003a0e <_free_r+0x26>
 8003a60:	6825      	ldr	r5, [r4, #0]
 8003a62:	1961      	adds	r1, r4, r5
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf04      	itt	eq
 8003a68:	6819      	ldreq	r1, [r3, #0]
 8003a6a:	685b      	ldreq	r3, [r3, #4]
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	bf04      	itt	eq
 8003a70:	1949      	addeq	r1, r1, r5
 8003a72:	6021      	streq	r1, [r4, #0]
 8003a74:	6054      	str	r4, [r2, #4]
 8003a76:	e7ca      	b.n	8003a0e <_free_r+0x26>
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd30      	pop	{r4, r5, pc}
 8003a7c:	200007c4 	.word	0x200007c4

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0e      	ldr	r6, [pc, #56]	; (8003abc <sbrk_aligned+0x3c>)
 8003a84:	460c      	mov	r4, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	b911      	cbnz	r1, 8003a92 <sbrk_aligned+0x12>
 8003a8c:	f000 fba6 	bl	80041dc <_sbrk_r>
 8003a90:	6030      	str	r0, [r6, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fba1 	bl	80041dc <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <sbrk_aligned+0x34>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d007      	beq.n	8003ab8 <sbrk_aligned+0x38>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fb96 	bl	80041dc <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d101      	bne.n	8003ab8 <sbrk_aligned+0x38>
 8003ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	200007c8 	.word	0x200007c8

08003ac0 <_malloc_r>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	1ccd      	adds	r5, r1, #3
 8003ac6:	f025 0503 	bic.w	r5, r5, #3
 8003aca:	3508      	adds	r5, #8
 8003acc:	2d0c      	cmp	r5, #12
 8003ace:	bf38      	it	cc
 8003ad0:	250c      	movcc	r5, #12
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	db01      	blt.n	8003adc <_malloc_r+0x1c>
 8003ad8:	42a9      	cmp	r1, r5
 8003ada:	d905      	bls.n	8003ae8 <_malloc_r+0x28>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bbc <_malloc_r+0xfc>
 8003aec:	f000 f868 	bl	8003bc0 <__malloc_lock>
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	461c      	mov	r4, r3
 8003af6:	bb5c      	cbnz	r4, 8003b50 <_malloc_r+0x90>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ffc0 	bl	8003a80 <sbrk_aligned>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	4604      	mov	r4, r0
 8003b04:	d155      	bne.n	8003bb2 <_malloc_r+0xf2>
 8003b06:	f8d8 4000 	ldr.w	r4, [r8]
 8003b0a:	4626      	mov	r6, r4
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d145      	bne.n	8003b9c <_malloc_r+0xdc>
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d048      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	eb04 0903 	add.w	r9, r4, r3
 8003b1e:	f000 fb5d 	bl	80041dc <_sbrk_r>
 8003b22:	4581      	cmp	r9, r0
 8003b24:	d13f      	bne.n	8003ba6 <_malloc_r+0xe6>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1a6d      	subs	r5, r5, r1
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ffa7 	bl	8003a80 <sbrk_aligned>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d037      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	442b      	add	r3, r5
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <_malloc_r+0xf6>
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0xe2>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xb0>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d41f      	bmi.n	8003b96 <_malloc_r+0xd6>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xca>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4638      	mov	r0, r7
 8003b72:	f104 060b 	add.w	r6, r4, #11
 8003b76:	f000 f829 	bl	8003bcc <__malloc_unlock>
 8003b7a:	f026 0607 	bic.w	r6, r6, #7
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	1af2      	subs	r2, r6, r3
 8003b82:	d0ae      	beq.n	8003ae2 <_malloc_r+0x22>
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	50a3      	str	r3, [r4, r2]
 8003b88:	e7ab      	b.n	8003ae2 <_malloc_r+0x22>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x8c>
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e7ec      	b.n	8003b70 <_malloc_r+0xb0>
 8003b96:	4623      	mov	r3, r4
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	e7ac      	b.n	8003af6 <_malloc_r+0x36>
 8003b9c:	4634      	mov	r4, r6
 8003b9e:	6876      	ldr	r6, [r6, #4]
 8003ba0:	e7b4      	b.n	8003b0c <_malloc_r+0x4c>
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e7cc      	b.n	8003b40 <_malloc_r+0x80>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4638      	mov	r0, r7
 8003bac:	f000 f80e 	bl	8003bcc <__malloc_unlock>
 8003bb0:	e797      	b.n	8003ae2 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7dc      	b.n	8003b70 <_malloc_r+0xb0>
 8003bb6:	605b      	str	r3, [r3, #4]
 8003bb8:	deff      	udf	#255	; 0xff
 8003bba:	bf00      	nop
 8003bbc:	200007c4 	.word	0x200007c4

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf07 	b.w	80039d4 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	200007c0 	.word	0x200007c0

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf02 	b.w	80039d6 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	200007c0 	.word	0x200007c0

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	688e      	ldr	r6, [r1, #8]
 8003bde:	461f      	mov	r7, r3
 8003be0:	42be      	cmp	r6, r7
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	4682      	mov	sl, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4690      	mov	r8, r2
 8003bea:	d82c      	bhi.n	8003c46 <__ssputs_r+0x6e>
 8003bec:	898a      	ldrh	r2, [r1, #12]
 8003bee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf2:	d026      	beq.n	8003c42 <__ssputs_r+0x6a>
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	6909      	ldr	r1, [r1, #16]
 8003bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bfc:	eba3 0901 	sub.w	r9, r3, r1
 8003c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c04:	1c7b      	adds	r3, r7, #1
 8003c06:	444b      	add	r3, r9
 8003c08:	106d      	asrs	r5, r5, #1
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf38      	it	cc
 8003c0e:	461d      	movcc	r5, r3
 8003c10:	0553      	lsls	r3, r2, #21
 8003c12:	d527      	bpl.n	8003c64 <__ssputs_r+0x8c>
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7ff ff53 	bl	8003ac0 <_malloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	b360      	cbz	r0, 8003c78 <__ssputs_r+0xa0>
 8003c1e:	6921      	ldr	r1, [r4, #16]
 8003c20:	464a      	mov	r2, r9
 8003c22:	f000 faeb 	bl	80041fc <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	6126      	str	r6, [r4, #16]
 8003c34:	6165      	str	r5, [r4, #20]
 8003c36:	444e      	add	r6, r9
 8003c38:	eba5 0509 	sub.w	r5, r5, r9
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	60a5      	str	r5, [r4, #8]
 8003c40:	463e      	mov	r6, r7
 8003c42:	42be      	cmp	r6, r7
 8003c44:	d900      	bls.n	8003c48 <__ssputs_r+0x70>
 8003c46:	463e      	mov	r6, r7
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	f000 faab 	bl	80041a8 <memmove>
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	4433      	add	r3, r6
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	462a      	mov	r2, r5
 8003c66:	f000 fad7 	bl	8004218 <_realloc_r>
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x5a>
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7ff feb8 	bl	80039e8 <_free_r>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	f8ca 3000 	str.w	r3, [sl]
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e7e9      	b.n	8003c60 <__ssputs_r+0x88>

08003c8c <_svfiprintf_r>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4698      	mov	r8, r3
 8003c92:	898b      	ldrh	r3, [r1, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4607      	mov	r7, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	d50e      	bpl.n	8003cbe <_svfiprintf_r+0x32>
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	b963      	cbnz	r3, 8003cbe <_svfiprintf_r+0x32>
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	f7ff ff0b 	bl	8003ac0 <_malloc_r>
 8003caa:	6028      	str	r0, [r5, #0]
 8003cac:	6128      	str	r0, [r5, #16]
 8003cae:	b920      	cbnz	r0, 8003cba <_svfiprintf_r+0x2e>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e0d0      	b.n	8003e5c <_svfiprintf_r+0x1d0>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	616b      	str	r3, [r5, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ccc:	2330      	movs	r3, #48	; 0x30
 8003cce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e74 <_svfiprintf_r+0x1e8>
 8003cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd6:	f04f 0901 	mov.w	r9, #1
 8003cda:	4623      	mov	r3, r4
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce2:	b10a      	cbz	r2, 8003ce8 <_svfiprintf_r+0x5c>
 8003ce4:	2a25      	cmp	r2, #37	; 0x25
 8003ce6:	d1f9      	bne.n	8003cdc <_svfiprintf_r+0x50>
 8003ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cec:	d00b      	beq.n	8003d06 <_svfiprintf_r+0x7a>
 8003cee:	465b      	mov	r3, fp
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7ff ff6f 	bl	8003bd8 <__ssputs_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f000 80a9 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d02:	445a      	add	r2, fp
 8003d04:	9209      	str	r2, [sp, #36]	; 0x24
 8003d06:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a1 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f04f 32ff 	mov.w	r2, #4294967295
 8003d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d1a:	f10a 0a01 	add.w	sl, sl, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	9307      	str	r3, [sp, #28]
 8003d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d26:	931a      	str	r3, [sp, #104]	; 0x68
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d30:	4850      	ldr	r0, [pc, #320]	; (8003e74 <_svfiprintf_r+0x1e8>)
 8003d32:	f7fc fa6d 	bl	8000210 <memchr>
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	b9d8      	cbnz	r0, 8003d72 <_svfiprintf_r+0xe6>
 8003d3a:	06d0      	lsls	r0, r2, #27
 8003d3c:	bf44      	itt	mi
 8003d3e:	2320      	movmi	r3, #32
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	0711      	lsls	r1, r2, #28
 8003d46:	bf44      	itt	mi
 8003d48:	232b      	movmi	r3, #43	; 0x2b
 8003d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d015      	beq.n	8003d82 <_svfiprintf_r+0xf6>
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	4654      	mov	r4, sl
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f04f 0c0a 	mov.w	ip, #10
 8003d60:	4621      	mov	r1, r4
 8003d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d66:	3b30      	subs	r3, #48	; 0x30
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d94d      	bls.n	8003e08 <_svfiprintf_r+0x17c>
 8003d6c:	b1b0      	cbz	r0, 8003d9c <_svfiprintf_r+0x110>
 8003d6e:	9207      	str	r2, [sp, #28]
 8003d70:	e014      	b.n	8003d9c <_svfiprintf_r+0x110>
 8003d72:	eba0 0308 	sub.w	r3, r0, r8
 8003d76:	fa09 f303 	lsl.w	r3, r9, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	46a2      	mov	sl, r4
 8003d80:	e7d2      	b.n	8003d28 <_svfiprintf_r+0x9c>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	1d19      	adds	r1, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfbb      	ittet	lt
 8003d8e:	425b      	neglt	r3, r3
 8003d90:	f042 0202 	orrlt.w	r2, r2, #2
 8003d94:	9307      	strge	r3, [sp, #28]
 8003d96:	9307      	strlt	r3, [sp, #28]
 8003d98:	bfb8      	it	lt
 8003d9a:	9204      	strlt	r2, [sp, #16]
 8003d9c:	7823      	ldrb	r3, [r4, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d10c      	bne.n	8003dbc <_svfiprintf_r+0x130>
 8003da2:	7863      	ldrb	r3, [r4, #1]
 8003da4:	2b2a      	cmp	r3, #42	; 0x2a
 8003da6:	d134      	bne.n	8003e12 <_svfiprintf_r+0x186>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9203      	str	r2, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfb8      	it	lt
 8003db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db8:	3402      	adds	r4, #2
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e84 <_svfiprintf_r+0x1f8>
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f7fc fa23 	bl	8000210 <memchr>
 8003dca:	b138      	cbz	r0, 8003ddc <_svfiprintf_r+0x150>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	eba0 000a 	sub.w	r0, r0, sl
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	4082      	lsls	r2, r0
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	3401      	adds	r4, #1
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de0:	4825      	ldr	r0, [pc, #148]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de6:	2206      	movs	r2, #6
 8003de8:	f7fc fa12 	bl	8000210 <memchr>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d038      	beq.n	8003e62 <_svfiprintf_r+0x1d6>
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <_svfiprintf_r+0x1f0>)
 8003df2:	bb1b      	cbnz	r3, 8003e3c <_svfiprintf_r+0x1b0>
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	3307      	adds	r3, #7
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	4433      	add	r3, r6
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	e768      	b.n	8003cda <_svfiprintf_r+0x4e>
 8003e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7a6      	b.n	8003d60 <_svfiprintf_r+0xd4>
 8003e12:	2300      	movs	r3, #0
 8003e14:	3401      	adds	r4, #1
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0c0a 	mov.w	ip, #10
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e24:	3a30      	subs	r2, #48	; 0x30
 8003e26:	2a09      	cmp	r2, #9
 8003e28:	d903      	bls.n	8003e32 <_svfiprintf_r+0x1a6>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0c6      	beq.n	8003dbc <_svfiprintf_r+0x130>
 8003e2e:	9105      	str	r1, [sp, #20]
 8003e30:	e7c4      	b.n	8003dbc <_svfiprintf_r+0x130>
 8003e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e36:	4604      	mov	r4, r0
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f0      	b.n	8003e1e <_svfiprintf_r+0x192>
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e44:	a904      	add	r1, sp, #16
 8003e46:	4638      	mov	r0, r7
 8003e48:	f3af 8000 	nop.w
 8003e4c:	1c42      	adds	r2, r0, #1
 8003e4e:	4606      	mov	r6, r0
 8003e50:	d1d6      	bne.n	8003e00 <_svfiprintf_r+0x174>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	065b      	lsls	r3, r3, #25
 8003e56:	f53f af2d 	bmi.w	8003cb4 <_svfiprintf_r+0x28>
 8003e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5c:	b01d      	add	sp, #116	; 0x74
 8003e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462a      	mov	r2, r5
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e6a:	a904      	add	r1, sp, #16
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f000 f879 	bl	8003f64 <_printf_i>
 8003e72:	e7eb      	b.n	8003e4c <_svfiprintf_r+0x1c0>
 8003e74:	080044e6 	.word	0x080044e6
 8003e78:	080044f0 	.word	0x080044f0
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003bd9 	.word	0x08003bd9
 8003e84:	080044ec 	.word	0x080044ec

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	f003 0306 	and.w	r3, r3, #6
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf02      	ittt	eq
 8003efa:	68e5      	ldreq	r5, [r4, #12]
 8003efc:	6833      	ldreq	r3, [r6, #0]
 8003efe:	1aed      	subeq	r5, r5, r3
 8003f00:	68a3      	ldr	r3, [r4, #8]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f6c:	2f78      	cmp	r7, #120	; 0x78
 8003f6e:	4691      	mov	r9, r2
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	469a      	mov	sl, r3
 8003f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d4 	beq.w	800412e <_printf_i+0x1ca>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80c0 	beq.w	800410c <_printf_i+0x1a8>
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	08004115 	.word	0x08004115
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	080040cf 	.word	0x080040cf
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	08004137 	.word	0x08004137
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	080040d7 	.word	0x080040d7
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e09f      	b.n	8004150 <_printf_i+0x1ec>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	0607      	lsls	r7, r0, #24
 8004016:	f103 0104 	add.w	r1, r3, #4
 800401a:	6029      	str	r1, [r5, #0]
 800401c:	d501      	bpl.n	8004022 <_printf_i+0xbe>
 800401e:	681e      	ldr	r6, [r3, #0]
 8004020:	e003      	b.n	800402a <_printf_i+0xc6>
 8004022:	0646      	lsls	r6, r0, #25
 8004024:	d5fb      	bpl.n	800401e <_printf_i+0xba>
 8004026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800402a:	2e00      	cmp	r6, #0
 800402c:	da03      	bge.n	8004036 <_printf_i+0xd2>
 800402e:	232d      	movs	r3, #45	; 0x2d
 8004030:	4276      	negs	r6, r6
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004036:	485a      	ldr	r0, [pc, #360]	; (80041a0 <_printf_i+0x23c>)
 8004038:	230a      	movs	r3, #10
 800403a:	e012      	b.n	8004062 <_printf_i+0xfe>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	0605      	lsls	r5, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xe8>
 8004048:	681e      	ldr	r6, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0xee>
 800404c:	0641      	lsls	r1, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xe4>
 8004050:	881e      	ldrh	r6, [r3, #0]
 8004052:	4853      	ldr	r0, [pc, #332]	; (80041a0 <_printf_i+0x23c>)
 8004054:	2f6f      	cmp	r7, #111	; 0x6f
 8004056:	bf0c      	ite	eq
 8004058:	2308      	moveq	r3, #8
 800405a:	230a      	movne	r3, #10
 800405c:	2100      	movs	r1, #0
 800405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004062:	6865      	ldr	r5, [r4, #4]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	2d00      	cmp	r5, #0
 8004068:	bfa2      	ittt	ge
 800406a:	6821      	ldrge	r1, [r4, #0]
 800406c:	f021 0104 	bicge.w	r1, r1, #4
 8004070:	6021      	strge	r1, [r4, #0]
 8004072:	b90e      	cbnz	r6, 8004078 <_printf_i+0x114>
 8004074:	2d00      	cmp	r5, #0
 8004076:	d04b      	beq.n	8004110 <_printf_i+0x1ac>
 8004078:	4615      	mov	r5, r2
 800407a:	fbb6 f1f3 	udiv	r1, r6, r3
 800407e:	fb03 6711 	mls	r7, r3, r1, r6
 8004082:	5dc7      	ldrb	r7, [r0, r7]
 8004084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004088:	4637      	mov	r7, r6
 800408a:	42bb      	cmp	r3, r7
 800408c:	460e      	mov	r6, r1
 800408e:	d9f4      	bls.n	800407a <_printf_i+0x116>
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <_printf_i+0x148>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07de      	lsls	r6, r3, #31
 8004098:	d508      	bpl.n	80040ac <_printf_i+0x148>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	6861      	ldr	r1, [r4, #4]
 800409e:	4299      	cmp	r1, r3
 80040a0:	bfde      	ittt	le
 80040a2:	2330      	movle	r3, #48	; 0x30
 80040a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ac:	1b52      	subs	r2, r2, r5
 80040ae:	6122      	str	r2, [r4, #16]
 80040b0:	f8cd a000 	str.w	sl, [sp]
 80040b4:	464b      	mov	r3, r9
 80040b6:	aa03      	add	r2, sp, #12
 80040b8:	4621      	mov	r1, r4
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7ff fee4 	bl	8003e88 <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d14a      	bne.n	800415a <_printf_i+0x1f6>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	4833      	ldr	r0, [pc, #204]	; (80041a4 <_printf_i+0x240>)
 80040d8:	2778      	movs	r7, #120	; 0x78
 80040da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	6829      	ldr	r1, [r5, #0]
 80040e2:	061f      	lsls	r7, r3, #24
 80040e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e8:	d402      	bmi.n	80040f0 <_printf_i+0x18c>
 80040ea:	065f      	lsls	r7, r3, #25
 80040ec:	bf48      	it	mi
 80040ee:	b2b6      	uxthmi	r6, r6
 80040f0:	07df      	lsls	r7, r3, #31
 80040f2:	bf48      	it	mi
 80040f4:	f043 0320 	orrmi.w	r3, r3, #32
 80040f8:	6029      	str	r1, [r5, #0]
 80040fa:	bf48      	it	mi
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b91e      	cbnz	r6, 8004108 <_printf_i+0x1a4>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2310      	movs	r3, #16
 800410a:	e7a7      	b.n	800405c <_printf_i+0xf8>
 800410c:	4824      	ldr	r0, [pc, #144]	; (80041a0 <_printf_i+0x23c>)
 800410e:	e7e4      	b.n	80040da <_printf_i+0x176>
 8004110:	4615      	mov	r5, r2
 8004112:	e7bd      	b.n	8004090 <_printf_i+0x12c>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6826      	ldr	r6, [r4, #0]
 8004118:	6961      	ldr	r1, [r4, #20]
 800411a:	1d18      	adds	r0, r3, #4
 800411c:	6028      	str	r0, [r5, #0]
 800411e:	0635      	lsls	r5, r6, #24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	d501      	bpl.n	8004128 <_printf_i+0x1c4>
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e002      	b.n	800412e <_printf_i+0x1ca>
 8004128:	0670      	lsls	r0, r6, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0x1c0>
 800412c:	8019      	strh	r1, [r3, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	4615      	mov	r5, r2
 8004134:	e7bc      	b.n	80040b0 <_printf_i+0x14c>
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	602a      	str	r2, [r5, #0]
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	6862      	ldr	r2, [r4, #4]
 8004140:	2100      	movs	r1, #0
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc f864 	bl	8000210 <memchr>
 8004148:	b108      	cbz	r0, 800414e <_printf_i+0x1ea>
 800414a:	1b40      	subs	r0, r0, r5
 800414c:	6060      	str	r0, [r4, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	2300      	movs	r3, #0
 8004154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004158:	e7aa      	b.n	80040b0 <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	462a      	mov	r2, r5
 800415e:	4649      	mov	r1, r9
 8004160:	4640      	mov	r0, r8
 8004162:	47d0      	blx	sl
 8004164:	3001      	adds	r0, #1
 8004166:	d0ad      	beq.n	80040c4 <_printf_i+0x160>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	079b      	lsls	r3, r3, #30
 800416c:	d413      	bmi.n	8004196 <_printf_i+0x232>
 800416e:	68e0      	ldr	r0, [r4, #12]
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	4298      	cmp	r0, r3
 8004174:	bfb8      	it	lt
 8004176:	4618      	movlt	r0, r3
 8004178:	e7a6      	b.n	80040c8 <_printf_i+0x164>
 800417a:	2301      	movs	r3, #1
 800417c:	4632      	mov	r2, r6
 800417e:	4649      	mov	r1, r9
 8004180:	4640      	mov	r0, r8
 8004182:	47d0      	blx	sl
 8004184:	3001      	adds	r0, #1
 8004186:	d09d      	beq.n	80040c4 <_printf_i+0x160>
 8004188:	3501      	adds	r5, #1
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	1a5b      	subs	r3, r3, r1
 8004190:	42ab      	cmp	r3, r5
 8004192:	dcf2      	bgt.n	800417a <_printf_i+0x216>
 8004194:	e7eb      	b.n	800416e <_printf_i+0x20a>
 8004196:	2500      	movs	r5, #0
 8004198:	f104 0619 	add.w	r6, r4, #25
 800419c:	e7f5      	b.n	800418a <_printf_i+0x226>
 800419e:	bf00      	nop
 80041a0:	080044f7 	.word	0x080044f7
 80041a4:	08004508 	.word	0x08004508

080041a8 <memmove>:
 80041a8:	4288      	cmp	r0, r1
 80041aa:	b510      	push	{r4, lr}
 80041ac:	eb01 0402 	add.w	r4, r1, r2
 80041b0:	d902      	bls.n	80041b8 <memmove+0x10>
 80041b2:	4284      	cmp	r4, r0
 80041b4:	4623      	mov	r3, r4
 80041b6:	d807      	bhi.n	80041c8 <memmove+0x20>
 80041b8:	1e43      	subs	r3, r0, #1
 80041ba:	42a1      	cmp	r1, r4
 80041bc:	d008      	beq.n	80041d0 <memmove+0x28>
 80041be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041c6:	e7f8      	b.n	80041ba <memmove+0x12>
 80041c8:	4402      	add	r2, r0
 80041ca:	4601      	mov	r1, r0
 80041cc:	428a      	cmp	r2, r1
 80041ce:	d100      	bne.n	80041d2 <memmove+0x2a>
 80041d0:	bd10      	pop	{r4, pc}
 80041d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041da:	e7f7      	b.n	80041cc <memmove+0x24>

080041dc <_sbrk_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_sbrk_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fd fa1e 	bl	8001628 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_sbrk_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_sbrk_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200007bc 	.word	0x200007bc

080041fc <memcpy>:
 80041fc:	440a      	add	r2, r1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f100 33ff 	add.w	r3, r0, #4294967295
 8004204:	d100      	bne.n	8004208 <memcpy+0xc>
 8004206:	4770      	bx	lr
 8004208:	b510      	push	{r4, lr}
 800420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004212:	4291      	cmp	r1, r2
 8004214:	d1f9      	bne.n	800420a <memcpy+0xe>
 8004216:	bd10      	pop	{r4, pc}

08004218 <_realloc_r>:
 8004218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4680      	mov	r8, r0
 800421e:	4614      	mov	r4, r2
 8004220:	460e      	mov	r6, r1
 8004222:	b921      	cbnz	r1, 800422e <_realloc_r+0x16>
 8004224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	4611      	mov	r1, r2
 800422a:	f7ff bc49 	b.w	8003ac0 <_malloc_r>
 800422e:	b92a      	cbnz	r2, 800423c <_realloc_r+0x24>
 8004230:	f7ff fbda 	bl	80039e8 <_free_r>
 8004234:	4625      	mov	r5, r4
 8004236:	4628      	mov	r0, r5
 8004238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423c:	f000 f81b 	bl	8004276 <_malloc_usable_size_r>
 8004240:	4284      	cmp	r4, r0
 8004242:	4607      	mov	r7, r0
 8004244:	d802      	bhi.n	800424c <_realloc_r+0x34>
 8004246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800424a:	d812      	bhi.n	8004272 <_realloc_r+0x5a>
 800424c:	4621      	mov	r1, r4
 800424e:	4640      	mov	r0, r8
 8004250:	f7ff fc36 	bl	8003ac0 <_malloc_r>
 8004254:	4605      	mov	r5, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d0ed      	beq.n	8004236 <_realloc_r+0x1e>
 800425a:	42bc      	cmp	r4, r7
 800425c:	4622      	mov	r2, r4
 800425e:	4631      	mov	r1, r6
 8004260:	bf28      	it	cs
 8004262:	463a      	movcs	r2, r7
 8004264:	f7ff ffca 	bl	80041fc <memcpy>
 8004268:	4631      	mov	r1, r6
 800426a:	4640      	mov	r0, r8
 800426c:	f7ff fbbc 	bl	80039e8 <_free_r>
 8004270:	e7e1      	b.n	8004236 <_realloc_r+0x1e>
 8004272:	4635      	mov	r5, r6
 8004274:	e7df      	b.n	8004236 <_realloc_r+0x1e>

08004276 <_malloc_usable_size_r>:
 8004276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800427a:	1f18      	subs	r0, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfbc      	itt	lt
 8004280:	580b      	ldrlt	r3, [r1, r0]
 8004282:	18c0      	addlt	r0, r0, r3
 8004284:	4770      	bx	lr
	...

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
